
C:\Users\Liasucupira\Desktop\DoisLdrs\Debug\DoisLdrs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080034ac  080034ac  000134ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080035ac  080035ac  000135ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080035b0  080035b0  000135b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  080035b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000108  20000074  08003628  00020074  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000017c  08003628  0002017c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  9 .debug_info   000109f7  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000025de  00000000  00000000  00030a94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000848  00000000  00000000  00033078  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000730  00000000  00000000  000338c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004e95  00000000  00000000  00033ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027f8  00000000  00000000  00038e85  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003b67d  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002258  00000000  00000000  0003b6fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003494 	.word	0x08003494

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003494 	.word	0x08003494

0800014c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000150:	4a08      	ldr	r2, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000152:	4b08      	ldr	r3, [pc, #32]	; (8000174 <HAL_Init+0x28>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	f043 0310 	orr.w	r3, r3, #16
 800015a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800015c:	2003      	movs	r0, #3
 800015e:	f000 fe61 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000162:	2000      	movs	r0, #0
 8000164:	f000 f808 	bl	8000178 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000168:	f002 fbe4 	bl	8002934 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800016c:	2300      	movs	r3, #0
}
 800016e:	4618      	mov	r0, r3
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40022000 	.word	0x40022000

08000178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <HAL_InitTick+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <HAL_InitTick+0x34>)
 8000186:	fba2 2303 	umull	r2, r3, r2, r3
 800018a:	099b      	lsrs	r3, r3, #6
 800018c:	4618      	mov	r0, r3
 800018e:	f000 fe7e 	bl	8000e8e <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000192:	2200      	movs	r2, #0
 8000194:	6879      	ldr	r1, [r7, #4]
 8000196:	f04f 30ff 	mov.w	r0, #4294967295
 800019a:	f000 fe4e 	bl	8000e3a <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
 800019e:	2300      	movs	r3, #0
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	3708      	adds	r7, #8
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	10624dd3 	.word	0x10624dd3

080001b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  uwTick++;
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <HAL_IncTick+0x18>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	3301      	adds	r3, #1
 80001ba:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x18>)
 80001bc:	6013      	str	r3, [r2, #0]
}
 80001be:	bf00      	nop
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200000a0 	.word	0x200000a0

080001cc <HAL_GetTick>:
  * @note  This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
  return uwTick;
 80001d0:	4b02      	ldr	r3, [pc, #8]	; (80001dc <HAL_GetTick+0x10>)
 80001d2:	681b      	ldr	r3, [r3, #0]
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	200000a0 	.word	0x200000a0

080001e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	b084      	sub	sp, #16
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80001e8:	f7ff fff0 	bl	80001cc <HAL_GetTick>
 80001ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001f2:	68fb      	ldr	r3, [r7, #12]
 80001f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001f8:	d002      	beq.n	8000200 <HAL_Delay+0x20>
  {
     wait++;
 80001fa:	68fb      	ldr	r3, [r7, #12]
 80001fc:	3301      	adds	r3, #1
 80001fe:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000200:	bf00      	nop
 8000202:	f7ff ffe3 	bl	80001cc <HAL_GetTick>
 8000206:	4602      	mov	r2, r0
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	1ad2      	subs	r2, r2, r3
 800020c:	68fb      	ldr	r3, [r7, #12]
 800020e:	429a      	cmp	r2, r3
 8000210:	d3f7      	bcc.n	8000202 <HAL_Delay+0x22>
  {
  }
}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b086      	sub	sp, #24
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000224:	2300      	movs	r3, #0
 8000226:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000228:	2300      	movs	r3, #0
 800022a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800022c:	2300      	movs	r3, #0
 800022e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000230:	2300      	movs	r3, #0
 8000232:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d101      	bne.n	800023e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800023a:	2301      	movs	r3, #1
 800023c:	e0be      	b.n	80003bc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689b      	ldr	r3, [r3, #8]
 8000242:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000248:	2b00      	cmp	r3, #0
 800024a:	d109      	bne.n	8000260 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2200      	movs	r2, #0
 8000250:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2200      	movs	r2, #0
 8000256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f002 f970 	bl	8002540 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000260:	6878      	ldr	r0, [r7, #4]
 8000262:	f000 fc6f 	bl	8000b44 <ADC_ConversionStop_Disable>
 8000266:	4603      	mov	r3, r0
 8000268:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800026e:	f003 0310 	and.w	r3, r3, #16
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8099 	bne.w	80003aa <HAL_ADC_Init+0x18e>
 8000278:	7dfb      	ldrb	r3, [r7, #23]
 800027a:	2b00      	cmp	r3, #0
 800027c:	f040 8095 	bne.w	80003aa <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000284:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000288:	f023 0302 	bic.w	r3, r3, #2
 800028c:	f043 0202 	orr.w	r2, r3, #2
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800029c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	68db      	ldr	r3, [r3, #12]
 80002a2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80002a4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80002a6:	68ba      	ldr	r2, [r7, #8]
 80002a8:	4313      	orrs	r3, r2
 80002aa:	60bb      	str	r3, [r7, #8]
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002b4:	d003      	beq.n	80002be <HAL_ADC_Init+0xa2>
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d102      	bne.n	80002c4 <HAL_ADC_Init+0xa8>
 80002be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002c2:	e000      	b.n	80002c6 <HAL_ADC_Init+0xaa>
 80002c4:	2300      	movs	r3, #0
 80002c6:	693a      	ldr	r2, [r7, #16]
 80002c8:	4313      	orrs	r3, r2
 80002ca:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d119      	bne.n	8000308 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d109      	bne.n	80002f0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	035a      	lsls	r2, r3, #13
 80002e4:	693b      	ldr	r3, [r7, #16]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002ec:	613b      	str	r3, [r7, #16]
 80002ee:	e00b      	b.n	8000308 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002f4:	f043 0220 	orr.w	r2, r3, #32
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000300:	f043 0201 	orr.w	r2, r3, #1
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	687a      	ldr	r2, [r7, #4]
 800030e:	6812      	ldr	r2, [r2, #0]
 8000310:	6852      	ldr	r2, [r2, #4]
 8000312:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 8000316:	693a      	ldr	r2, [r7, #16]
 8000318:	430a      	orrs	r2, r1
 800031a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	6899      	ldr	r1, [r3, #8]
 8000326:	4b27      	ldr	r3, [pc, #156]	; (80003c4 <HAL_ADC_Init+0x1a8>)
 8000328:	400b      	ands	r3, r1
 800032a:	68b9      	ldr	r1, [r7, #8]
 800032c:	430b      	orrs	r3, r1
 800032e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000338:	d003      	beq.n	8000342 <HAL_ADC_Init+0x126>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	689b      	ldr	r3, [r3, #8]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d104      	bne.n	800034c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	691b      	ldr	r3, [r3, #16]
 8000346:	3b01      	subs	r3, #1
 8000348:	051b      	lsls	r3, r3, #20
 800034a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	687a      	ldr	r2, [r7, #4]
 8000352:	6812      	ldr	r2, [r2, #0]
 8000354:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000356:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 800035a:	68fa      	ldr	r2, [r7, #12]
 800035c:	430a      	orrs	r2, r1
 800035e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	689a      	ldr	r2, [r3, #8]
 8000366:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <HAL_ADC_Init+0x1ac>)
 8000368:	4013      	ands	r3, r2
 800036a:	68ba      	ldr	r2, [r7, #8]
 800036c:	4293      	cmp	r3, r2
 800036e:	d10b      	bne.n	8000388 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2200      	movs	r2, #0
 8000374:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800037a:	f023 0303 	bic.w	r3, r3, #3
 800037e:	f043 0201 	orr.w	r2, r3, #1
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000386:	e018      	b.n	80003ba <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800038c:	f023 0312 	bic.w	r3, r3, #18
 8000390:	f043 0210 	orr.w	r2, r3, #16
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800039c:	f043 0201 	orr.w	r2, r3, #1
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80003a4:	2301      	movs	r3, #1
 80003a6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80003a8:	e007      	b.n	80003ba <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003ae:	f043 0210 	orr.w	r2, r3, #16
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80003b6:	2301      	movs	r3, #1
 80003b8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80003ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3718      	adds	r7, #24
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	ffe1f7fd 	.word	0xffe1f7fd
 80003c8:	ff1f0efe 	.word	0xff1f0efe

080003cc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80003d4:	2300      	movs	r3, #0
 80003d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80003de:	2b01      	cmp	r3, #1
 80003e0:	d101      	bne.n	80003e6 <HAL_ADC_Start_IT+0x1a>
 80003e2:	2302      	movs	r3, #2
 80003e4:	e0a0      	b.n	8000528 <HAL_ADC_Start_IT+0x15c>
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2201      	movs	r2, #1
 80003ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f000 fb56 	bl	8000aa0 <ADC_Enable>
 80003f4:	4603      	mov	r3, r0
 80003f6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 808f 	bne.w	800051e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000404:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000408:	f023 0301 	bic.w	r3, r3, #1
 800040c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a45      	ldr	r2, [pc, #276]	; (8000530 <HAL_ADC_Start_IT+0x164>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d105      	bne.n	800042a <HAL_ADC_Start_IT+0x5e>
 800041e:	4b45      	ldr	r3, [pc, #276]	; (8000534 <HAL_ADC_Start_IT+0x168>)
 8000420:	685b      	ldr	r3, [r3, #4]
 8000422:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000426:	2b00      	cmp	r3, #0
 8000428:	d115      	bne.n	8000456 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800042e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000440:	2b00      	cmp	r3, #0
 8000442:	d026      	beq.n	8000492 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000448:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800044c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000454:	e01d      	b.n	8000492 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800045a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a33      	ldr	r2, [pc, #204]	; (8000534 <HAL_ADC_Start_IT+0x168>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d004      	beq.n	8000476 <HAL_ADC_Start_IT+0xaa>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	4a2f      	ldr	r2, [pc, #188]	; (8000530 <HAL_ADC_Start_IT+0x164>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d10d      	bne.n	8000492 <HAL_ADC_Start_IT+0xc6>
 8000476:	4b2f      	ldr	r3, [pc, #188]	; (8000534 <HAL_ADC_Start_IT+0x168>)
 8000478:	685b      	ldr	r3, [r3, #4]
 800047a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800047e:	2b00      	cmp	r3, #0
 8000480:	d007      	beq.n	8000492 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000486:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800048a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800049a:	2b00      	cmp	r3, #0
 800049c:	d006      	beq.n	80004ac <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a2:	f023 0206 	bic.w	r2, r3, #6
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004aa:	e002      	b.n	80004b2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2200      	movs	r2, #0
 80004b0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2200      	movs	r2, #0
 80004b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f06f 0202 	mvn.w	r2, #2
 80004c2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	6812      	ldr	r2, [r2, #0]
 80004cc:	6852      	ldr	r2, [r2, #4]
 80004ce:	f042 0220 	orr.w	r2, r2, #32
 80004d2:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	689b      	ldr	r3, [r3, #8]
 80004da:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80004de:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80004e2:	d113      	bne.n	800050c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004e8:	4a11      	ldr	r2, [pc, #68]	; (8000530 <HAL_ADC_Start_IT+0x164>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d105      	bne.n	80004fa <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80004ee:	4b11      	ldr	r3, [pc, #68]	; (8000534 <HAL_ADC_Start_IT+0x168>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d108      	bne.n	800050c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	687a      	ldr	r2, [r7, #4]
 8000500:	6812      	ldr	r2, [r2, #0]
 8000502:	6892      	ldr	r2, [r2, #8]
 8000504:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	e00c      	b.n	8000526 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	6812      	ldr	r2, [r2, #0]
 8000514:	6892      	ldr	r2, [r2, #8]
 8000516:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	e003      	b.n	8000526 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000526:	7bfb      	ldrb	r3, [r7, #15]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3710      	adds	r7, #16
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	40012800 	.word	0x40012800
 8000534:	40012400 	.word	0x40012400

08000538 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000544:	2300      	movs	r3, #0
 8000546:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a64      	ldr	r2, [pc, #400]	; (80006e0 <HAL_ADC_Start_DMA+0x1a8>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d004      	beq.n	800055c <HAL_ADC_Start_DMA+0x24>
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a63      	ldr	r2, [pc, #396]	; (80006e4 <HAL_ADC_Start_DMA+0x1ac>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d106      	bne.n	800056a <HAL_ADC_Start_DMA+0x32>
 800055c:	4b60      	ldr	r3, [pc, #384]	; (80006e0 <HAL_ADC_Start_DMA+0x1a8>)
 800055e:	685b      	ldr	r3, [r3, #4]
 8000560:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000564:	2b00      	cmp	r3, #0
 8000566:	f040 80b3 	bne.w	80006d0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000570:	2b01      	cmp	r3, #1
 8000572:	d101      	bne.n	8000578 <HAL_ADC_Start_DMA+0x40>
 8000574:	2302      	movs	r3, #2
 8000576:	e0ae      	b.n	80006d6 <HAL_ADC_Start_DMA+0x19e>
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	2201      	movs	r2, #1
 800057c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000580:	68f8      	ldr	r0, [r7, #12]
 8000582:	f000 fa8d 	bl	8000aa0 <ADC_Enable>
 8000586:	4603      	mov	r3, r0
 8000588:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800058a:	7dfb      	ldrb	r3, [r7, #23]
 800058c:	2b00      	cmp	r3, #0
 800058e:	f040 809a 	bne.w	80006c6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000596:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800059a:	f023 0301 	bic.w	r3, r3, #1
 800059e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a4e      	ldr	r2, [pc, #312]	; (80006e4 <HAL_ADC_Start_DMA+0x1ac>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d105      	bne.n	80005bc <HAL_ADC_Start_DMA+0x84>
 80005b0:	4b4b      	ldr	r3, [pc, #300]	; (80006e0 <HAL_ADC_Start_DMA+0x1a8>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d115      	bne.n	80005e8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005c0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d026      	beq.n	8000624 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80005e6:	e01d      	b.n	8000624 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ec:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a39      	ldr	r2, [pc, #228]	; (80006e0 <HAL_ADC_Start_DMA+0x1a8>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d004      	beq.n	8000608 <HAL_ADC_Start_DMA+0xd0>
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a38      	ldr	r2, [pc, #224]	; (80006e4 <HAL_ADC_Start_DMA+0x1ac>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d10d      	bne.n	8000624 <HAL_ADC_Start_DMA+0xec>
 8000608:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <HAL_ADC_Start_DMA+0x1a8>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000610:	2b00      	cmp	r3, #0
 8000612:	d007      	beq.n	8000624 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000618:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800061c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800062c:	2b00      	cmp	r3, #0
 800062e:	d006      	beq.n	800063e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000634:	f023 0206 	bic.w	r2, r3, #6
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
 800063c:	e002      	b.n	8000644 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	2200      	movs	r2, #0
 8000648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	4a25      	ldr	r2, [pc, #148]	; (80006e8 <HAL_ADC_Start_DMA+0x1b0>)
 8000652:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	6a1b      	ldr	r3, [r3, #32]
 8000658:	4a24      	ldr	r2, [pc, #144]	; (80006ec <HAL_ADC_Start_DMA+0x1b4>)
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <HAL_ADC_Start_DMA+0x1b8>)
 8000662:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f06f 0202 	mvn.w	r2, #2
 800066c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	68fa      	ldr	r2, [r7, #12]
 8000674:	6812      	ldr	r2, [r2, #0]
 8000676:	6892      	ldr	r2, [r2, #8]
 8000678:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800067c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	6a18      	ldr	r0, [r3, #32]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	334c      	adds	r3, #76	; 0x4c
 8000688:	4619      	mov	r1, r3
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f000 fc99 	bl	8000fc4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	689b      	ldr	r3, [r3, #8]
 8000698:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800069c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80006a0:	d108      	bne.n	80006b4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	6812      	ldr	r2, [r2, #0]
 80006aa:	6892      	ldr	r2, [r2, #8]
 80006ac:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80006b0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80006b2:	e00f      	b.n	80006d4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68fa      	ldr	r2, [r7, #12]
 80006ba:	6812      	ldr	r2, [r2, #0]
 80006bc:	6892      	ldr	r2, [r2, #8]
 80006be:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80006c2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80006c4:	e006      	b.n	80006d4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	2200      	movs	r2, #0
 80006ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80006ce:	e001      	b.n	80006d4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80006d0:	2301      	movs	r3, #1
 80006d2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80006d6:	4618      	mov	r0, r3
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40012400 	.word	0x40012400
 80006e4:	40012800 	.word	0x40012800
 80006e8:	08000bb9 	.word	0x08000bb9
 80006ec:	08000c35 	.word	0x08000c35
 80006f0:	08000c51 	.word	0x08000c51

080006f4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	f003 0320 	and.w	r3, r3, #32
 8000706:	2b20      	cmp	r3, #32
 8000708:	d140      	bne.n	800078c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f003 0302 	and.w	r3, r3, #2
 8000714:	2b02      	cmp	r3, #2
 8000716:	d139      	bne.n	800078c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800071c:	f003 0310 	and.w	r3, r3, #16
 8000720:	2b00      	cmp	r3, #0
 8000722:	d105      	bne.n	8000730 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000728:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800073a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800073e:	d11d      	bne.n	800077c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000744:	2b00      	cmp	r3, #0
 8000746:	d119      	bne.n	800077c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	6812      	ldr	r2, [r2, #0]
 8000750:	6852      	ldr	r2, [r2, #4]
 8000752:	f022 0220 	bic.w	r2, r2, #32
 8000756:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800075c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800076c:	2b00      	cmp	r3, #0
 800076e:	d105      	bne.n	800077c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000774:	f043 0201 	orr.w	r2, r3, #1
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f001 ffa1 	bl	80026c4 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f06f 0212 	mvn.w	r2, #18
 800078a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000796:	2b80      	cmp	r3, #128	; 0x80
 8000798:	d14f      	bne.n	800083a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	2b04      	cmp	r3, #4
 80007a6:	d148      	bne.n	800083a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ac:	f003 0310 	and.w	r3, r3, #16
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d105      	bne.n	80007c0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007b8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80007ca:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80007ce:	d012      	beq.n	80007f6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d125      	bne.n	800082a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	689b      	ldr	r3, [r3, #8]
 80007e4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80007e8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80007ec:	d11d      	bne.n	800082a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	68db      	ldr	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d119      	bne.n	800082a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	6812      	ldr	r2, [r2, #0]
 80007fe:	6852      	ldr	r2, [r2, #4]
 8000800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000804:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800081a:	2b00      	cmp	r3, #0
 800081c:	d105      	bne.n	800082a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000822:	f043 0201 	orr.w	r2, r3, #1
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 fa2a 	bl	8000c84 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f06f 020c 	mvn.w	r2, #12
 8000838:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000844:	2b40      	cmp	r3, #64	; 0x40
 8000846:	d114      	bne.n	8000872 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b01      	cmp	r3, #1
 8000854:	d10d      	bne.n	8000872 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800085a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 f812 	bl	800088c <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f06f 0201 	mvn.w	r2, #1
 8000870:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000882:	bf00      	nop
 8000884:	370c      	adds	r7, #12
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800089e:	b480      	push	{r7}
 80008a0:	b083      	sub	sp, #12
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr

080008b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80008b0:	b490      	push	{r4, r7}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d101      	bne.n	80008d0 <HAL_ADC_ConfigChannel+0x20>
 80008cc:	2302      	movs	r3, #2
 80008ce:	e0dc      	b.n	8000a8a <HAL_ADC_ConfigChannel+0x1da>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2201      	movs	r2, #1
 80008d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	2b06      	cmp	r3, #6
 80008de:	d81c      	bhi.n	800091a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	6819      	ldr	r1, [r3, #0]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685a      	ldr	r2, [r3, #4]
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	3b05      	subs	r3, #5
 80008f6:	221f      	movs	r2, #31
 80008f8:	fa02 f303 	lsl.w	r3, r2, r3
 80008fc:	43db      	mvns	r3, r3
 80008fe:	4018      	ands	r0, r3
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	681c      	ldr	r4, [r3, #0]
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	3b05      	subs	r3, #5
 8000910:	fa04 f303 	lsl.w	r3, r4, r3
 8000914:	4303      	orrs	r3, r0
 8000916:	634b      	str	r3, [r1, #52]	; 0x34
 8000918:	e03c      	b.n	8000994 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	2b0c      	cmp	r3, #12
 8000920:	d81c      	bhi.n	800095c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6819      	ldr	r1, [r3, #0]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	3b23      	subs	r3, #35	; 0x23
 8000938:	221f      	movs	r2, #31
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43db      	mvns	r3, r3
 8000940:	4018      	ands	r0, r3
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681c      	ldr	r4, [r3, #0]
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685a      	ldr	r2, [r3, #4]
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	3b23      	subs	r3, #35	; 0x23
 8000952:	fa04 f303 	lsl.w	r3, r4, r3
 8000956:	4303      	orrs	r3, r0
 8000958:	630b      	str	r3, [r1, #48]	; 0x30
 800095a:	e01b      	b.n	8000994 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	6819      	ldr	r1, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685a      	ldr	r2, [r3, #4]
 800096a:	4613      	mov	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	4413      	add	r3, r2
 8000970:	3b41      	subs	r3, #65	; 0x41
 8000972:	221f      	movs	r2, #31
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	43db      	mvns	r3, r3
 800097a:	4018      	ands	r0, r3
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	681c      	ldr	r4, [r3, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	4613      	mov	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	3b41      	subs	r3, #65	; 0x41
 800098c:	fa04 f303 	lsl.w	r3, r4, r3
 8000990:	4303      	orrs	r3, r0
 8000992:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b09      	cmp	r3, #9
 800099a:	d91c      	bls.n	80009d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6819      	ldr	r1, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68d8      	ldr	r0, [r3, #12]
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4613      	mov	r3, r2
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	4413      	add	r3, r2
 80009b0:	3b1e      	subs	r3, #30
 80009b2:	2207      	movs	r2, #7
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	4018      	ands	r0, r3
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	689c      	ldr	r4, [r3, #8]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	4613      	mov	r3, r2
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	4413      	add	r3, r2
 80009ca:	3b1e      	subs	r3, #30
 80009cc:	fa04 f303 	lsl.w	r3, r4, r3
 80009d0:	4303      	orrs	r3, r0
 80009d2:	60cb      	str	r3, [r1, #12]
 80009d4:	e019      	b.n	8000a0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6819      	ldr	r1, [r3, #0]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6918      	ldr	r0, [r3, #16]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	2207      	movs	r2, #7
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	4018      	ands	r0, r3
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	689c      	ldr	r4, [r3, #8]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4613      	mov	r3, r2
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	4413      	add	r3, r2
 8000a02:	fa04 f303 	lsl.w	r3, r4, r3
 8000a06:	4303      	orrs	r3, r0
 8000a08:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b10      	cmp	r3, #16
 8000a10:	d003      	beq.n	8000a1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a16:	2b11      	cmp	r3, #17
 8000a18:	d132      	bne.n	8000a80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a1d      	ldr	r2, [pc, #116]	; (8000a94 <HAL_ADC_ConfigChannel+0x1e4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d125      	bne.n	8000a70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d126      	bne.n	8000a80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	6812      	ldr	r2, [r2, #0]
 8000a3a:	6892      	ldr	r2, [r2, #8]
 8000a3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a40:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b10      	cmp	r3, #16
 8000a48:	d11a      	bne.n	8000a80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <HAL_ADC_ConfigChannel+0x1e8>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a13      	ldr	r2, [pc, #76]	; (8000a9c <HAL_ADC_ConfigChannel+0x1ec>)
 8000a50:	fba2 2303 	umull	r2, r3, r2, r3
 8000a54:	0c9a      	lsrs	r2, r3, #18
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a60:	e002      	b.n	8000a68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d1f9      	bne.n	8000a62 <HAL_ADC_ConfigChannel+0x1b2>
 8000a6e:	e007      	b.n	8000a80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a74:	f043 0220 	orr.w	r2, r3, #32
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc90      	pop	{r4, r7}
 8000a92:	4770      	bx	lr
 8000a94:	40012400 	.word	0x40012400
 8000a98:	2000000c 	.word	0x2000000c
 8000a9c:	431bde83 	.word	0x431bde83

08000aa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d039      	beq.n	8000b32 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	6892      	ldr	r2, [r2, #8]
 8000ac8:	f042 0201 	orr.w	r2, r2, #1
 8000acc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <ADC_Enable+0x9c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <ADC_Enable+0xa0>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	0c9b      	lsrs	r3, r3, #18
 8000ada:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000adc:	e002      	b.n	8000ae4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1f9      	bne.n	8000ade <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000aea:	f7ff fb6f 	bl	80001cc <HAL_GetTick>
 8000aee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000af0:	e018      	b.n	8000b24 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000af2:	f7ff fb6b 	bl	80001cc <HAL_GetTick>
 8000af6:	4602      	mov	r2, r0
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	1ad3      	subs	r3, r2, r3
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d911      	bls.n	8000b24 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	f043 0210 	orr.w	r2, r3, #16
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b10:	f043 0201 	orr.w	r2, r3, #1
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e007      	b.n	8000b34 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d1df      	bne.n	8000af2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000b32:	2300      	movs	r3, #0
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	2000000c 	.word	0x2000000c
 8000b40:	431bde83 	.word	0x431bde83

08000b44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d127      	bne.n	8000bae <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	6892      	ldr	r2, [r2, #8]
 8000b68:	f022 0201 	bic.w	r2, r2, #1
 8000b6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b6e:	f7ff fb2d 	bl	80001cc <HAL_GetTick>
 8000b72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b74:	e014      	b.n	8000ba0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b76:	f7ff fb29 	bl	80001cc <HAL_GetTick>
 8000b7a:	4602      	mov	r2, r0
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d90d      	bls.n	8000ba0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	f043 0210 	orr.w	r2, r3, #16
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b94:	f043 0201 	orr.w	r2, r3, #1
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e007      	b.n	8000bb0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d0e3      	beq.n	8000b76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bc4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d127      	bne.n	8000c22 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	689b      	ldr	r3, [r3, #8]
 8000be4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000be8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000bec:	d115      	bne.n	8000c1a <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	68db      	ldr	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d111      	bne.n	8000c1a <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bfa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d105      	bne.n	8000c1a <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c12:	f043 0201 	orr.w	r2, r3, #1
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8000c1a:	68f8      	ldr	r0, [r7, #12]
 8000c1c:	f001 fd52 	bl	80026c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8000c20:	e004      	b.n	8000c2c <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	4798      	blx	r3
}
 8000c2c:	bf00      	nop
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c40:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8000c42:	68f8      	ldr	r0, [r7, #12]
 8000c44:	f7ff fe19 	bl	800087a <HAL_ADC_ConvHalfCpltCallback>
}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6e:	f043 0204 	orr.w	r2, r3, #4
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f7ff fe11 	bl	800089e <HAL_ADC_ErrorCallback>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
	...

08000c98 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d06:	4908      	ldr	r1, [pc, #32]	; (8000d28 <NVIC_EnableIRQ+0x2c>)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	095b      	lsrs	r3, r3, #5
 8000d0e:	79fa      	ldrb	r2, [r7, #7]
 8000d10:	f002 021f 	and.w	r2, r2, #31
 8000d14:	2001      	movs	r0, #1
 8000d16:	fa00 f202 	lsl.w	r2, r0, r2
 8000d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bc80      	pop	{r7}
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100

08000d2c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	da0b      	bge.n	8000d58 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	490d      	ldr	r1, [pc, #52]	; (8000d78 <NVIC_SetPriority+0x4c>)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	f003 030f 	and.w	r3, r3, #15
 8000d48:	3b04      	subs	r3, #4
 8000d4a:	683a      	ldr	r2, [r7, #0]
 8000d4c:	b2d2      	uxtb	r2, r2
 8000d4e:	0112      	lsls	r2, r2, #4
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	440b      	add	r3, r1
 8000d54:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d56:	e009      	b.n	8000d6c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d58:	4908      	ldr	r1, [pc, #32]	; (8000d7c <NVIC_SetPriority+0x50>)
 8000d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	0112      	lsls	r2, r2, #4
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	440b      	add	r3, r1
 8000d68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00
 8000d7c:	e000e100 	.word	0xe000e100

08000d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	f1c3 0307 	rsb	r3, r3, #7
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	bf28      	it	cs
 8000d9e:	2304      	movcs	r3, #4
 8000da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	3304      	adds	r3, #4
 8000da6:	2b06      	cmp	r3, #6
 8000da8:	d902      	bls.n	8000db0 <NVIC_EncodePriority+0x30>
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3b03      	subs	r3, #3
 8000dae:	e000      	b.n	8000db2 <NVIC_EncodePriority+0x32>
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db4:	2201      	movs	r2, #1
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	1e5a      	subs	r2, r3, #1
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	1e59      	subs	r1, r3, #1
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3b01      	subs	r3, #1
 8000dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000df0:	d301      	bcc.n	8000df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00f      	b.n	8000e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <SysTick_Config+0x40>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dfe:	210f      	movs	r1, #15
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f7ff ff92 	bl	8000d2c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <SysTick_Config+0x40>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <SysTick_Config+0x40>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	e000e010 	.word	0xe000e010

08000e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ff33 	bl	8000c98 <NVIC_SetPriorityGrouping>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b086      	sub	sp, #24
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	60b9      	str	r1, [r7, #8]
 8000e44:	607a      	str	r2, [r7, #4]
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e4c:	f7ff ff48 	bl	8000ce0 <NVIC_GetPriorityGrouping>
 8000e50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	68b9      	ldr	r1, [r7, #8]
 8000e56:	6978      	ldr	r0, [r7, #20]
 8000e58:	f7ff ff92 	bl	8000d80 <NVIC_EncodePriority>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	4611      	mov	r1, r2
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff61 	bl	8000d2c <NVIC_SetPriority>
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff ff3b 	bl	8000cfc <NVIC_EnableIRQ>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	f7ff ffa2 	bl	8000de0 <SysTick_Config>
 8000e9c:	4603      	mov	r3, r0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
	...

08000ea8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b04      	cmp	r3, #4
 8000eb4:	d106      	bne.n	8000ec4 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000eb6:	4a09      	ldr	r2, [pc, #36]	; (8000edc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8000ec2:	e005      	b.n	8000ed0 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000ec4:	4a05      	ldr	r2, [pc, #20]	; (8000edc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 0304 	bic.w	r3, r3, #4
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bc80      	pop	{r7}
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000e010 	.word	0xe000e010

08000ee0 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000ee4:	f000 f802 	bl	8000eec <HAL_SYSTICK_Callback>
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e04f      	b.n	8000fae <HAL_DMA_Init+0xb6>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <HAL_DMA_Init+0xc0>)
 8000f16:	4413      	add	r3, r2
 8000f18:	4a28      	ldr	r2, [pc, #160]	; (8000fbc <HAL_DMA_Init+0xc4>)
 8000f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	009a      	lsls	r2, r3, #2
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a25      	ldr	r2, [pc, #148]	; (8000fc0 <HAL_DMA_Init+0xc8>)
 8000f2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* STM32F101xE || STM32F101xG || STM32F103xE || STM32F103xG || STM32F100xE || STM32F105xC || STM32F107xC */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2202      	movs	r2, #2
 8000f30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69db      	ldr	r3, [r3, #28]
 8000f6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	601a      	str	r2, [r3, #0]


  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr
 8000fb8:	bffdfff8 	.word	0xbffdfff8
 8000fbc:	cccccccd 	.word	0xcccccccd
 8000fc0:	40020000 	.word	0x40020000

08000fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <HAL_DMA_Start_IT+0x20>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e04a      	b.n	800107a <HAL_DMA_Start_IT+0xb6>
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d13a      	bne.n	800106c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2202      	movs	r2, #2
 8000ffa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	2200      	movs	r2, #0
 8001002:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	6812      	ldr	r2, [r2, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 f944 	bl	80012a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	f042 020e 	orr.w	r2, r2, #14
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	e00f      	b.n	800105a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	6812      	ldr	r2, [r2, #0]
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	f022 0204 	bic.w	r2, r2, #4
 8001048:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	6812      	ldr	r2, [r2, #0]
 8001054:	f042 020a 	orr.w	r2, r2, #10
 8001058:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	6812      	ldr	r2, [r2, #0]
 8001062:	6812      	ldr	r2, [r2, #0]
 8001064:	f042 0201 	orr.w	r2, r2, #1
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	e005      	b.n	8001078 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001074:	2302      	movs	r3, #2
 8001076:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001078:	7dfb      	ldrb	r3, [r7, #23]
}
 800107a:	4618      	mov	r0, r3
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	2204      	movs	r2, #4
 80010a2:	409a      	lsls	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d055      	beq.n	8001158 <HAL_DMA_IRQHandler+0xd4>
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d050      	beq.n	8001158 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0320 	and.w	r3, r3, #32
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d107      	bne.n	80010d4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	6812      	ldr	r2, [r2, #0]
 80010ce:	f022 0204 	bic.w	r2, r2, #4
 80010d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80010d4:	4a6d      	ldr	r2, [pc, #436]	; (800128c <HAL_DMA_IRQHandler+0x208>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4619      	mov	r1, r3
 80010dc:	4b6c      	ldr	r3, [pc, #432]	; (8001290 <HAL_DMA_IRQHandler+0x20c>)
 80010de:	4299      	cmp	r1, r3
 80010e0:	d02e      	beq.n	8001140 <HAL_DMA_IRQHandler+0xbc>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4619      	mov	r1, r3
 80010e8:	4b6a      	ldr	r3, [pc, #424]	; (8001294 <HAL_DMA_IRQHandler+0x210>)
 80010ea:	4299      	cmp	r1, r3
 80010ec:	d026      	beq.n	800113c <HAL_DMA_IRQHandler+0xb8>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4b68      	ldr	r3, [pc, #416]	; (8001298 <HAL_DMA_IRQHandler+0x214>)
 80010f6:	4299      	cmp	r1, r3
 80010f8:	d01d      	beq.n	8001136 <HAL_DMA_IRQHandler+0xb2>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4619      	mov	r1, r3
 8001100:	4b66      	ldr	r3, [pc, #408]	; (800129c <HAL_DMA_IRQHandler+0x218>)
 8001102:	4299      	cmp	r1, r3
 8001104:	d014      	beq.n	8001130 <HAL_DMA_IRQHandler+0xac>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	4b64      	ldr	r3, [pc, #400]	; (80012a0 <HAL_DMA_IRQHandler+0x21c>)
 800110e:	4299      	cmp	r1, r3
 8001110:	d00b      	beq.n	800112a <HAL_DMA_IRQHandler+0xa6>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	4b62      	ldr	r3, [pc, #392]	; (80012a4 <HAL_DMA_IRQHandler+0x220>)
 800111a:	4299      	cmp	r1, r3
 800111c:	d102      	bne.n	8001124 <HAL_DMA_IRQHandler+0xa0>
 800111e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001122:	e00e      	b.n	8001142 <HAL_DMA_IRQHandler+0xbe>
 8001124:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001128:	e00b      	b.n	8001142 <HAL_DMA_IRQHandler+0xbe>
 800112a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800112e:	e008      	b.n	8001142 <HAL_DMA_IRQHandler+0xbe>
 8001130:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001134:	e005      	b.n	8001142 <HAL_DMA_IRQHandler+0xbe>
 8001136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800113a:	e002      	b.n	8001142 <HAL_DMA_IRQHandler+0xbe>
 800113c:	2340      	movs	r3, #64	; 0x40
 800113e:	e000      	b.n	8001142 <HAL_DMA_IRQHandler+0xbe>
 8001140:	2304      	movs	r3, #4
 8001142:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001148:	2b00      	cmp	r3, #0
 800114a:	f000 809a 	beq.w	8001282 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001156:	e094      	b.n	8001282 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	2202      	movs	r2, #2
 800115e:	409a      	lsls	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d05c      	beq.n	8001222 <HAL_DMA_IRQHandler+0x19e>
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d057      	beq.n	8001222 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0320 	and.w	r3, r3, #32
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10b      	bne.n	8001198 <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	f022 020a 	bic.w	r2, r2, #10
 800118e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001198:	4a3c      	ldr	r2, [pc, #240]	; (800128c <HAL_DMA_IRQHandler+0x208>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4619      	mov	r1, r3
 80011a0:	4b3b      	ldr	r3, [pc, #236]	; (8001290 <HAL_DMA_IRQHandler+0x20c>)
 80011a2:	4299      	cmp	r1, r3
 80011a4:	d02e      	beq.n	8001204 <HAL_DMA_IRQHandler+0x180>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4619      	mov	r1, r3
 80011ac:	4b39      	ldr	r3, [pc, #228]	; (8001294 <HAL_DMA_IRQHandler+0x210>)
 80011ae:	4299      	cmp	r1, r3
 80011b0:	d026      	beq.n	8001200 <HAL_DMA_IRQHandler+0x17c>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4619      	mov	r1, r3
 80011b8:	4b37      	ldr	r3, [pc, #220]	; (8001298 <HAL_DMA_IRQHandler+0x214>)
 80011ba:	4299      	cmp	r1, r3
 80011bc:	d01d      	beq.n	80011fa <HAL_DMA_IRQHandler+0x176>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4619      	mov	r1, r3
 80011c4:	4b35      	ldr	r3, [pc, #212]	; (800129c <HAL_DMA_IRQHandler+0x218>)
 80011c6:	4299      	cmp	r1, r3
 80011c8:	d014      	beq.n	80011f4 <HAL_DMA_IRQHandler+0x170>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <HAL_DMA_IRQHandler+0x21c>)
 80011d2:	4299      	cmp	r1, r3
 80011d4:	d00b      	beq.n	80011ee <HAL_DMA_IRQHandler+0x16a>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4619      	mov	r1, r3
 80011dc:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <HAL_DMA_IRQHandler+0x220>)
 80011de:	4299      	cmp	r1, r3
 80011e0:	d102      	bne.n	80011e8 <HAL_DMA_IRQHandler+0x164>
 80011e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80011e6:	e00e      	b.n	8001206 <HAL_DMA_IRQHandler+0x182>
 80011e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011ec:	e00b      	b.n	8001206 <HAL_DMA_IRQHandler+0x182>
 80011ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011f2:	e008      	b.n	8001206 <HAL_DMA_IRQHandler+0x182>
 80011f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011f8:	e005      	b.n	8001206 <HAL_DMA_IRQHandler+0x182>
 80011fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011fe:	e002      	b.n	8001206 <HAL_DMA_IRQHandler+0x182>
 8001200:	2320      	movs	r3, #32
 8001202:	e000      	b.n	8001206 <HAL_DMA_IRQHandler+0x182>
 8001204:	2302      	movs	r3, #2
 8001206:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2200      	movs	r2, #0
 800120c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001214:	2b00      	cmp	r3, #0
 8001216:	d034      	beq.n	8001282 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001220:	e02f      	b.n	8001282 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	2208      	movs	r2, #8
 8001228:	409a      	lsls	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d028      	beq.n	8001284 <HAL_DMA_IRQHandler+0x200>
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d023      	beq.n	8001284 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	f022 020e 	bic.w	r2, r2, #14
 800124a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001254:	2101      	movs	r1, #1
 8001256:	fa01 f202 	lsl.w	r2, r1, r2
 800125a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	2b00      	cmp	r3, #0
 8001278:	d004      	beq.n	8001284 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	4798      	blx	r3
    }
  }
  return;
 8001282:	bf00      	nop
 8001284:	bf00      	nop
}
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40020000 	.word	0x40020000
 8001290:	40020008 	.word	0x40020008
 8001294:	4002001c 	.word	0x4002001c
 8001298:	40020030 	.word	0x40020030
 800129c:	40020044 	.word	0x40020044
 80012a0:	40020058 	.word	0x40020058
 80012a4:	4002006c 	.word	0x4002006c

080012a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012be:	2101      	movs	r1, #1
 80012c0:	fa01 f202 	lsl.w	r2, r1, r2
 80012c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b10      	cmp	r3, #16
 80012d4:	d108      	bne.n	80012e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012e6:	e007      	b.n	80012f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	60da      	str	r2, [r3, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bc80      	pop	{r7}
 8001300:	4770      	bx	lr
	...

08001304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b08b      	sub	sp, #44	; 0x2c
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
  uint32_t temp = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  uint32_t config = 0x00U;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset = 0U; /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
 8001326:	e127      	b.n	8001578 <HAL_GPIO_Init+0x274>
  {
    /* Get the IO position */
    ioposition = (0x01U << position);
 8001328:	2201      	movs	r2, #1
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	61fb      	str	r3, [r7, #28]
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	429a      	cmp	r2, r3
 8001342:	f040 8116 	bne.w	8001572 <HAL_GPIO_Init+0x26e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b12      	cmp	r3, #18
 800134c:	d034      	beq.n	80013b8 <HAL_GPIO_Init+0xb4>
 800134e:	2b12      	cmp	r3, #18
 8001350:	d80d      	bhi.n	800136e <HAL_GPIO_Init+0x6a>
 8001352:	2b02      	cmp	r3, #2
 8001354:	d02b      	beq.n	80013ae <HAL_GPIO_Init+0xaa>
 8001356:	2b02      	cmp	r3, #2
 8001358:	d804      	bhi.n	8001364 <HAL_GPIO_Init+0x60>
 800135a:	2b00      	cmp	r3, #0
 800135c:	d031      	beq.n	80013c2 <HAL_GPIO_Init+0xbe>
 800135e:	2b01      	cmp	r3, #1
 8001360:	d01c      	beq.n	800139c <HAL_GPIO_Init+0x98>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;
        
        /* Parameters are checked with assert_param */
        default:
          break;
 8001362:	e048      	b.n	80013f6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001364:	2b03      	cmp	r3, #3
 8001366:	d043      	beq.n	80013f0 <HAL_GPIO_Init+0xec>
 8001368:	2b11      	cmp	r3, #17
 800136a:	d01b      	beq.n	80013a4 <HAL_GPIO_Init+0xa0>
          break;
 800136c:	e043      	b.n	80013f6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 800136e:	4a87      	ldr	r2, [pc, #540]	; (800158c <HAL_GPIO_Init+0x288>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d026      	beq.n	80013c2 <HAL_GPIO_Init+0xbe>
 8001374:	4a85      	ldr	r2, [pc, #532]	; (800158c <HAL_GPIO_Init+0x288>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d806      	bhi.n	8001388 <HAL_GPIO_Init+0x84>
 800137a:	4a85      	ldr	r2, [pc, #532]	; (8001590 <HAL_GPIO_Init+0x28c>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d020      	beq.n	80013c2 <HAL_GPIO_Init+0xbe>
 8001380:	4a84      	ldr	r2, [pc, #528]	; (8001594 <HAL_GPIO_Init+0x290>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d01d      	beq.n	80013c2 <HAL_GPIO_Init+0xbe>
          break;
 8001386:	e036      	b.n	80013f6 <HAL_GPIO_Init+0xf2>
      switch (GPIO_Init->Mode)
 8001388:	4a83      	ldr	r2, [pc, #524]	; (8001598 <HAL_GPIO_Init+0x294>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d019      	beq.n	80013c2 <HAL_GPIO_Init+0xbe>
 800138e:	4a83      	ldr	r2, [pc, #524]	; (800159c <HAL_GPIO_Init+0x298>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d016      	beq.n	80013c2 <HAL_GPIO_Init+0xbe>
 8001394:	4a82      	ldr	r2, [pc, #520]	; (80015a0 <HAL_GPIO_Init+0x29c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0xbe>
          break;
 800139a:	e02c      	b.n	80013f6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	623b      	str	r3, [r7, #32]
          break;
 80013a2:	e028      	b.n	80013f6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	3304      	adds	r3, #4
 80013aa:	623b      	str	r3, [r7, #32]
          break;
 80013ac:	e023      	b.n	80013f6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	3308      	adds	r3, #8
 80013b4:	623b      	str	r3, [r7, #32]
          break;
 80013b6:	e01e      	b.n	80013f6 <HAL_GPIO_Init+0xf2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	330c      	adds	r3, #12
 80013be:	623b      	str	r3, [r7, #32]
          break;
 80013c0:	e019      	b.n	80013f6 <HAL_GPIO_Init+0xf2>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d102      	bne.n	80013d0 <HAL_GPIO_Init+0xcc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013ca:	2304      	movs	r3, #4
 80013cc:	623b      	str	r3, [r7, #32]
          break; 
 80013ce:	e012      	b.n	80013f6 <HAL_GPIO_Init+0xf2>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d105      	bne.n	80013e4 <HAL_GPIO_Init+0xe0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d8:	2308      	movs	r3, #8
 80013da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	611a      	str	r2, [r3, #16]
          break; 
 80013e2:	e008      	b.n	80013f6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e4:	2308      	movs	r3, #8
 80013e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69fa      	ldr	r2, [r7, #28]
 80013ec:	615a      	str	r2, [r3, #20]
          break; 
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_Init+0xf2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
          break;
 80013f4:	bf00      	nop
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2bff      	cmp	r3, #255	; 0xff
 80013fa:	d801      	bhi.n	8001400 <HAL_GPIO_Init+0xfc>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	e001      	b.n	8001404 <HAL_GPIO_Init+0x100>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3304      	adds	r3, #4
 8001404:	60fb      	str	r3, [r7, #12]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	2bff      	cmp	r3, #255	; 0xff
 800140a:	d802      	bhi.n	8001412 <HAL_GPIO_Init+0x10e>
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x114>
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	3b08      	subs	r3, #8
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	613b      	str	r3, [r7, #16]
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	210f      	movs	r1, #15
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	401a      	ands	r2, r3
 800142a:	6a39      	ldr	r1, [r7, #32]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	431a      	orrs	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	601a      	str	r2, [r3, #0]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 8096 	beq.w	8001572 <HAL_GPIO_Init+0x26e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001446:	4a57      	ldr	r2, [pc, #348]	; (80015a4 <HAL_GPIO_Init+0x2a0>)
 8001448:	4b56      	ldr	r3, [pc, #344]	; (80015a4 <HAL_GPIO_Init+0x2a0>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6193      	str	r3, [r2, #24]
 8001452:	4b54      	ldr	r3, [pc, #336]	; (80015a4 <HAL_GPIO_Init+0x2a0>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2U];
 800145e:	4a52      	ldr	r2, [pc, #328]	; (80015a8 <HAL_GPIO_Init+0x2a4>)
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	4013      	ands	r3, r2
 8001480:	617b      	str	r3, [r7, #20]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a49      	ldr	r2, [pc, #292]	; (80015ac <HAL_GPIO_Init+0x2a8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d013      	beq.n	80014b2 <HAL_GPIO_Init+0x1ae>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a48      	ldr	r2, [pc, #288]	; (80015b0 <HAL_GPIO_Init+0x2ac>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d00d      	beq.n	80014ae <HAL_GPIO_Init+0x1aa>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a47      	ldr	r2, [pc, #284]	; (80015b4 <HAL_GPIO_Init+0x2b0>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d007      	beq.n	80014aa <HAL_GPIO_Init+0x1a6>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a46      	ldr	r2, [pc, #280]	; (80015b8 <HAL_GPIO_Init+0x2b4>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d101      	bne.n	80014a6 <HAL_GPIO_Init+0x1a2>
 80014a2:	2303      	movs	r3, #3
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x1b0>
 80014a6:	2304      	movs	r3, #4
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x1b0>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x1b0>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x1b0>
 80014b2:	2300      	movs	r3, #0
 80014b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b6:	f002 0203 	and.w	r2, r2, #3
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
        AFIO->EXTICR[position >> 2U] = temp;
 80014c4:	4938      	ldr	r1, [pc, #224]	; (80015a8 <HAL_GPIO_Init+0x2a4>)
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d006      	beq.n	80014ec <HAL_GPIO_Init+0x1e8>
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 80014de:	4937      	ldr	r1, [pc, #220]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 80014e0:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	600b      	str	r3, [r1, #0]
 80014ea:	e006      	b.n	80014fa <HAL_GPIO_Init+0x1f6>
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 80014ec:	4933      	ldr	r1, [pc, #204]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 80014ee:	4b33      	ldr	r3, [pc, #204]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4013      	ands	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_GPIO_Init+0x210>
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8001506:	492d      	ldr	r1, [pc, #180]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001508:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	4313      	orrs	r3, r2
 8001510:	604b      	str	r3, [r1, #4]
 8001512:	e006      	b.n	8001522 <HAL_GPIO_Init+0x21e>
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8001514:	4929      	ldr	r1, [pc, #164]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001516:	4b29      	ldr	r3, [pc, #164]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	43db      	mvns	r3, r3
 800151e:	4013      	ands	r3, r2
 8001520:	604b      	str	r3, [r1, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d006      	beq.n	800153c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800152e:	4923      	ldr	r1, [pc, #140]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001530:	4b22      	ldr	r3, [pc, #136]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	4313      	orrs	r3, r2
 8001538:	608b      	str	r3, [r1, #8]
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x246>
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800153c:	491f      	ldr	r1, [pc, #124]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 800153e:	4b1f      	ldr	r3, [pc, #124]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	4013      	ands	r3, r2
 8001548:	608b      	str	r3, [r1, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <HAL_GPIO_Init+0x260>
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8001556:	4919      	ldr	r1, [pc, #100]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001558:	4b18      	ldr	r3, [pc, #96]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 800155a:	68da      	ldr	r2, [r3, #12]
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	60cb      	str	r3, [r1, #12]
 8001562:	e006      	b.n	8001572 <HAL_GPIO_Init+0x26e>
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8001564:	4915      	ldr	r1, [pc, #84]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <HAL_GPIO_Init+0x2b8>)
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43db      	mvns	r3, r3
 800156e:	4013      	ands	r3, r2
 8001570:	60cb      	str	r3, [r1, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	3301      	adds	r3, #1
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	2b0f      	cmp	r3, #15
 800157c:	f67f aed4 	bls.w	8001328 <HAL_GPIO_Init+0x24>
        }
      }
    }
  }
}
 8001580:	bf00      	nop
 8001582:	372c      	adds	r7, #44	; 0x2c
 8001584:	46bd      	mov	sp, r7
 8001586:	bc80      	pop	{r7}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	10210000 	.word	0x10210000
 8001590:	10110000 	.word	0x10110000
 8001594:	10120000 	.word	0x10120000
 8001598:	10310000 	.word	0x10310000
 800159c:	10320000 	.word	0x10320000
 80015a0:	10220000 	.word	0x10220000
 80015a4:	40021000 	.word	0x40021000
 80015a8:	40010000 	.word	0x40010000
 80015ac:	40010800 	.word	0x40010800
 80015b0:	40010c00 	.word	0x40010c00
 80015b4:	40011000 	.word	0x40011000
 80015b8:	40011400 	.word	0x40011400
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_BIT_RESET: to clear the port pin
  *            @arg GPIO_BIT_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]
 80015cc:	4613      	mov	r3, r2
 80015ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d0:	787b      	ldrb	r3, [r7, #1]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015d6:	887a      	ldrh	r2, [r7, #2]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015dc:	e003      	b.n	80015e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	041a      	lsls	r2, r3, #16
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	611a      	str	r2, [r3, #16]
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 8087 	beq.w	8001718 <HAL_RCC_OscConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800160a:	4b92      	ldr	r3, [pc, #584]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d00c      	beq.n	8001630 <HAL_RCC_OscConfig+0x40>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001616:	4b8f      	ldr	r3, [pc, #572]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b08      	cmp	r3, #8
 8001620:	d112      	bne.n	8001648 <HAL_RCC_OscConfig+0x58>
 8001622:	4b8c      	ldr	r3, [pc, #560]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800162a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800162e:	d10b      	bne.n	8001648 <HAL_RCC_OscConfig+0x58>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	4b88      	ldr	r3, [pc, #544]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d06c      	beq.n	8001716 <HAL_RCC_OscConfig+0x126>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d168      	bne.n	8001716 <HAL_RCC_OscConfig+0x126>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e22d      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x70>
 8001652:	4a80      	ldr	r2, [pc, #512]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001654:	4b7f      	ldr	r3, [pc, #508]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e02e      	b.n	80016be <HAL_RCC_OscConfig+0xce>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d10c      	bne.n	8001682 <HAL_RCC_OscConfig+0x92>
 8001668:	4a7a      	ldr	r2, [pc, #488]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 800166a:	4b7a      	ldr	r3, [pc, #488]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4a77      	ldr	r2, [pc, #476]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001676:	4b77      	ldr	r3, [pc, #476]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e01d      	b.n	80016be <HAL_RCC_OscConfig+0xce>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800168a:	d10c      	bne.n	80016a6 <HAL_RCC_OscConfig+0xb6>
 800168c:	4a71      	ldr	r2, [pc, #452]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 800168e:	4b71      	ldr	r3, [pc, #452]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4a6e      	ldr	r2, [pc, #440]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 800169a:	4b6e      	ldr	r3, [pc, #440]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e00b      	b.n	80016be <HAL_RCC_OscConfig+0xce>
 80016a6:	4a6b      	ldr	r2, [pc, #428]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 80016a8:	4b6a      	ldr	r3, [pc, #424]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4a68      	ldr	r2, [pc, #416]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 80016b4:	4b67      	ldr	r3, [pc, #412]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d013      	beq.n	80016ee <HAL_RCC_OscConfig+0xfe>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7fe fd81 	bl	80001cc <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0xf0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ce:	f7fe fd7d 	bl	80001cc <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b64      	cmp	r3, #100	; 0x64
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0xf0>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1e1      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e0:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0xde>
 80016ec:	e014      	b.n	8001718 <HAL_RCC_OscConfig+0x128>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7fe fd6d 	bl	80001cc <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x118>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016f6:	f7fe fd69 	bl	80001cc <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b64      	cmp	r3, #100	; 0x64
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x118>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e1cd      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001708:	4b52      	ldr	r3, [pc, #328]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x106>
 8001714:	e000      	b.n	8001718 <HAL_RCC_OscConfig+0x128>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001716:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d063      	beq.n	80017ec <HAL_RCC_OscConfig+0x1fc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001724:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b00      	cmp	r3, #0
 800172e:	d00b      	beq.n	8001748 <HAL_RCC_OscConfig+0x158>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001730:	4b48      	ldr	r3, [pc, #288]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 030c 	and.w	r3, r3, #12
 8001738:	2b08      	cmp	r3, #8
 800173a:	d11c      	bne.n	8001776 <HAL_RCC_OscConfig+0x186>
 800173c:	4b45      	ldr	r3, [pc, #276]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d116      	bne.n	8001776 <HAL_RCC_OscConfig+0x186>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001748:	4b42      	ldr	r3, [pc, #264]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_OscConfig+0x170>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x170>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e1a1      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001760:	493c      	ldr	r1, [pc, #240]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001762:	4b3c      	ldr	r3, [pc, #240]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001774:	e03a      	b.n	80017ec <HAL_RCC_OscConfig+0x1fc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d020      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1d0>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <HAL_RCC_OscConfig+0x268>)
 8001780:	2201      	movs	r2, #1
 8001782:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7fe fd22 	bl	80001cc <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x1ae>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800178c:	f7fe fd1e 	bl	80001cc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x1ae>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e182      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179e:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0f0      	beq.n	800178c <HAL_RCC_OscConfig+0x19c>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017aa:	492a      	ldr	r1, [pc, #168]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 80017ac:	4b29      	ldr	r3, [pc, #164]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	695b      	ldr	r3, [r3, #20]
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]
 80017be:	e015      	b.n	80017ec <HAL_RCC_OscConfig+0x1fc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c0:	4b25      	ldr	r3, [pc, #148]	; (8001858 <HAL_RCC_OscConfig+0x268>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c6:	f7fe fd01 	bl	80001cc <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x1f0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ce:	f7fe fcfd 	bl	80001cc <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x1f0>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e161      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x1de>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d039      	beq.n	800186c <HAL_RCC_OscConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d019      	beq.n	8001834 <HAL_RCC_OscConfig+0x244>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7fe fce1 	bl	80001cc <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x230>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7fe fcdd 	bl	80001cc <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e141      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001820:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HAL_RCC_OscConfig+0x264>)
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x21e>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      RCC_Delay(1);
 800182c:	2001      	movs	r0, #1
 800182e:	f000 facb 	bl	8001dc8 <RCC_Delay>
 8001832:	e01b      	b.n	800186c <HAL_RCC_OscConfig+0x27c>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_OscConfig+0x26c>)
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800183a:	f7fe fcc7 	bl	80001cc <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	e00e      	b.n	8001860 <HAL_RCC_OscConfig+0x270>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001842:	f7fe fcc3 	bl	80001cc <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d907      	bls.n	8001860 <HAL_RCC_OscConfig+0x270>
        {
          return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e127      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
 8001854:	40021000 	.word	0x40021000
 8001858:	42420000 	.word	0x42420000
 800185c:	42420480 	.word	0x42420480
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001860:	4b92      	ldr	r3, [pc, #584]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1ea      	bne.n	8001842 <HAL_RCC_OscConfig+0x252>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80a6 	beq.w	80019c6 <HAL_RCC_OscConfig+0x3d6>
  {
    FlagStatus       pwrclkchanged = RESET;
 800187a:	2300      	movs	r3, #0
 800187c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187e:	4b8b      	ldr	r3, [pc, #556]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10d      	bne.n	80018a6 <HAL_RCC_OscConfig+0x2b6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800188a:	4a88      	ldr	r2, [pc, #544]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 800188c:	4b87      	ldr	r3, [pc, #540]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001894:	61d3      	str	r3, [r2, #28]
 8001896:	4b85      	ldr	r3, [pc, #532]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001898:	69db      	ldr	r3, [r3, #28]
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a6:	4b82      	ldr	r3, [pc, #520]	; (8001ab0 <HAL_RCC_OscConfig+0x4c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d118      	bne.n	80018e4 <HAL_RCC_OscConfig+0x2f4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018b2:	4a7f      	ldr	r2, [pc, #508]	; (8001ab0 <HAL_RCC_OscConfig+0x4c0>)
 80018b4:	4b7e      	ldr	r3, [pc, #504]	; (8001ab0 <HAL_RCC_OscConfig+0x4c0>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018be:	f7fe fc85 	bl	80001cc <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x2e8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c6:	f7fe fc81 	bl	80001cc <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	; 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x2e8>
        {
          return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e0e5      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d8:	4b75      	ldr	r3, [pc, #468]	; (8001ab0 <HAL_RCC_OscConfig+0x4c0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d106      	bne.n	80018fa <HAL_RCC_OscConfig+0x30a>
 80018ec:	4a6f      	ldr	r2, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 80018ee:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6213      	str	r3, [r2, #32]
 80018f8:	e02d      	b.n	8001956 <HAL_RCC_OscConfig+0x366>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x32c>
 8001902:	4a6a      	ldr	r2, [pc, #424]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001904:	4b69      	ldr	r3, [pc, #420]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6213      	str	r3, [r2, #32]
 800190e:	4a67      	ldr	r2, [pc, #412]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001910:	4b66      	ldr	r3, [pc, #408]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f023 0304 	bic.w	r3, r3, #4
 8001918:	6213      	str	r3, [r2, #32]
 800191a:	e01c      	b.n	8001956 <HAL_RCC_OscConfig+0x366>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b05      	cmp	r3, #5
 8001922:	d10c      	bne.n	800193e <HAL_RCC_OscConfig+0x34e>
 8001924:	4a61      	ldr	r2, [pc, #388]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001926:	4b61      	ldr	r3, [pc, #388]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	f043 0304 	orr.w	r3, r3, #4
 800192e:	6213      	str	r3, [r2, #32]
 8001930:	4a5e      	ldr	r2, [pc, #376]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001932:	4b5e      	ldr	r3, [pc, #376]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6213      	str	r3, [r2, #32]
 800193c:	e00b      	b.n	8001956 <HAL_RCC_OscConfig+0x366>
 800193e:	4a5b      	ldr	r2, [pc, #364]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001940:	4b5a      	ldr	r3, [pc, #360]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	f023 0301 	bic.w	r3, r3, #1
 8001948:	6213      	str	r3, [r2, #32]
 800194a:	4a58      	ldr	r2, [pc, #352]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 800194c:	4b57      	ldr	r3, [pc, #348]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	f023 0304 	bic.w	r3, r3, #4
 8001954:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d015      	beq.n	800198a <HAL_RCC_OscConfig+0x39a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195e:	f7fe fc35 	bl	80001cc <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x38c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7fe fc31 	bl	80001cc <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	; 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x38c>
        {
          return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e093      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800197c:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 800197e:	6a1b      	ldr	r3, [r3, #32]
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d0ee      	beq.n	8001966 <HAL_RCC_OscConfig+0x376>
 8001988:	e014      	b.n	80019b4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198a:	f7fe fc1f 	bl	80001cc <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x3b8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7fe fc1b 	bl	80001cc <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x3b8>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e07d      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a8:	4b40      	ldr	r3, [pc, #256]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1ee      	bne.n	8001992 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019b4:	7dfb      	ldrb	r3, [r7, #23]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d105      	bne.n	80019c6 <HAL_RCC_OscConfig+0x3d6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ba:	4a3c      	ldr	r2, [pc, #240]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 80019bc:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d069      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x4b2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ce:	4b37      	ldr	r3, [pc, #220]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d061      	beq.n	8001a9e <HAL_RCC_OscConfig+0x4ae>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d146      	bne.n	8001a70 <HAL_RCC_OscConfig+0x480>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7fe fbf0 	bl	80001cc <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f0:	f7fe fbec 	bl	80001cc <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e050      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a02:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x400>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a16:	d108      	bne.n	8001a2a <HAL_RCC_OscConfig+0x43a>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a18:	4924      	ldr	r1, [pc, #144]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001a1a:	4b24      	ldr	r3, [pc, #144]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a2a:	4820      	ldr	r0, [pc, #128]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001a2c:	4b1f      	ldr	r3, [pc, #124]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a19      	ldr	r1, [r3, #32]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	430b      	orrs	r3, r1
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a42:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7fe fbc0 	bl	80001cc <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x472>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a50:	f7fe fbbc 	bl	80001cc <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x472>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e020      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x460>
 8001a6e:	e018      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7fe fba9 	bl	80001cc <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x4a0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7fe fba5 	bl	80001cc <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x4a0>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e009      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	4b06      	ldr	r3, [pc, #24]	; (8001aac <HAL_RCC_OscConfig+0x4bc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x48e>
 8001a9c:	e001      	b.n	8001aa2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_RCC_OscConfig+0x4b4>
    }
  }
  
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	42420060 	.word	0x42420060

08001ab8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001ac6:	4b72      	ldr	r3, [pc, #456]	; (8001c90 <HAL_RCC_ClockConfig+0x1d8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0207 	and.w	r2, r3, #7
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d210      	bcs.n	8001af6 <HAL_RCC_ClockConfig+0x3e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad4:	496e      	ldr	r1, [pc, #440]	; (8001c90 <HAL_RCC_ClockConfig+0x1d8>)
 8001ad6:	4b6e      	ldr	r3, [pc, #440]	; (8001c90 <HAL_RCC_ClockConfig+0x1d8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 0207 	bic.w	r2, r3, #7
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ae4:	4b6a      	ldr	r3, [pc, #424]	; (8001c90 <HAL_RCC_ClockConfig+0x1d8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0207 	and.w	r2, r3, #7
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_ClockConfig+0x3e>
    {
      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0c8      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d008      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x5c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b02:	4964      	ldr	r1, [pc, #400]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001b04:	4b63      	ldr	r3, [pc, #396]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d06a      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x13e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d107      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x80>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b28:	4b5a      	ldr	r3, [pc, #360]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d115      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0a7      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x98>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b40:	4b54      	ldr	r3, [pc, #336]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e09b      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	4b50      	ldr	r3, [pc, #320]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e093      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b60:	494c      	ldr	r1, [pc, #304]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001b62:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f023 0203 	bic.w	r2, r3, #3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b72:	f7fe fb2b 	bl	80001cc <HAL_GetTick>
 8001b76:	60f8      	str	r0, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d112      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xee>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_ClockConfig+0xe0>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7fe fb23 	bl	80001cc <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_ClockConfig+0xe0>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e077      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b98:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 030c 	and.w	r3, r3, #12
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d1ee      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xca>
 8001ba4:	e027      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x13e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d11d      	bne.n	8001bea <HAL_RCC_ClockConfig+0x132>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7fe fb0c 	bl	80001cc <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e060      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc6:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d1ee      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xf8>
 8001bd2:	e010      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x13e>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7fe fafa 	bl	80001cc <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x132>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e04e      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bea:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1ee      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x11c>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bf6:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <HAL_RCC_ClockConfig+0x1d8>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0207 	and.w	r2, r3, #7
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d910      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x16e>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c04:	4922      	ldr	r1, [pc, #136]	; (8001c90 <HAL_RCC_ClockConfig+0x1d8>)
 8001c06:	4b22      	ldr	r3, [pc, #136]	; (8001c90 <HAL_RCC_ClockConfig+0x1d8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <HAL_RCC_ClockConfig+0x1d8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f003 0207 	and.w	r2, r3, #7
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x16e>
    {
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e030      	b.n	8001c88 <HAL_RCC_ClockConfig+0x1d0>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0304 	and.w	r3, r3, #4
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d008      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c32:	4918      	ldr	r1, [pc, #96]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001c34:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d009      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x1ac>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c50:	4910      	ldr	r1, [pc, #64]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c64:	f000 f81c 	bl	8001ca0 <HAL_RCC_GetSysClockFreq>
 8001c68:	4601      	mov	r1, r0
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_RCC_ClockConfig+0x1dc>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	091b      	lsrs	r3, r3, #4
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_RCC_ClockConfig+0x1e0>)
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	fa21 f303 	lsr.w	r3, r1, r3
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_RCC_ClockConfig+0x1e4>)
 8001c7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c80:	2000      	movs	r0, #0
 8001c82:	f7fe fa79 	bl	8000178 <HAL_InitTick>
  
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40022000 	.word	0x40022000
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08003560 	.word	0x08003560
 8001c9c:	2000000c 	.word	0x2000000c

08001ca0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca0:	b490      	push	{r4, r7}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ca6:	4b2a      	ldr	r3, [pc, #168]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ca8:	1d3c      	adds	r4, r7, #4
 8001caa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d002      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0x46>
 8001cde:	e02d      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ce2:	623b      	str	r3, [r7, #32]
      break;
 8001ce4:	e02d      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	0c9b      	lsrs	r3, r3, #18
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cf8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d013      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	0c5b      	lsrs	r3, r3, #17
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001d12:	4413      	add	r3, r2
 8001d14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d18:	61bb      	str	r3, [r7, #24]
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8001d1a:	4a10      	ldr	r2, [pc, #64]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
 8001d2a:	e004      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	623b      	str	r3, [r7, #32]
      break;
 8001d3a:	e002      	b.n	8001d42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d3e:	623b      	str	r3, [r7, #32]
      break;
 8001d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d42:	6a3b      	ldr	r3, [r7, #32]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3728      	adds	r7, #40	; 0x28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc90      	pop	{r4, r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	080034ac 	.word	0x080034ac
 8001d54:	080034bc 	.word	0x080034bc
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	007a1200 	.word	0x007a1200
 8001d60:	003d0900 	.word	0x003d0900

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	2000000c 	.word	0x2000000c

08001d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d7c:	f7ff fff2 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d80:	4601      	mov	r1, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8e:	5cd3      	ldrb	r3, [r2, r3]
 8001d90:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	08003570 	.word	0x08003570

08001da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001da8:	4601      	mov	r1, r0
 8001daa:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	0adb      	lsrs	r3, r3, #11
 8001db0:	f003 0307 	and.w	r3, r3, #7
 8001db4:	4a03      	ldr	r2, [pc, #12]	; (8001dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db6:	5cd3      	ldrb	r3, [r2, r3]
 8001db8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08003570 	.word	0x08003570

08001dc8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <RCC_Delay+0x34>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <RCC_Delay+0x38>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0a5b      	lsrs	r3, r3, #9
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	60fb      	str	r3, [r7, #12]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001de4:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1e5a      	subs	r2, r3, #1
 8001dea:	60fa      	str	r2, [r7, #12]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f9      	bne.n	8001de4 <RCC_Delay+0x1c>
}
 8001df0:	bf00      	nop
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2000000c 	.word	0x2000000c
 8001e00:	10624dd3 	.word	0x10624dd3

08001e04 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d07d      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e24:	4b4f      	ldr	r3, [pc, #316]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10d      	bne.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	4a4c      	ldr	r2, [pc, #304]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e32:	4b4c      	ldr	r3, [pc, #304]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e34:	69db      	ldr	r3, [r3, #28]
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	61d3      	str	r3, [r2, #28]
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e4c:	4b46      	ldr	r3, [pc, #280]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d118      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e58:	4a43      	ldr	r2, [pc, #268]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e5a:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e64:	f7fe f9b2 	bl	80001cc <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e6a:	e008      	b.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6c:	f7fe f9ae 	bl	80001cc <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b64      	cmp	r3, #100	; 0x64
 8001e78:	d901      	bls.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e06d      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e8c:	6a1b      	ldr	r3, [r3, #32]
 8001e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e92:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d02e      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d027      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001eb2:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001eb8:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ebe:	4a29      	ldr	r2, [pc, #164]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d014      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7fe f97d 	bl	80001cc <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed6:	f7fe f979 	bl	80001cc <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e036      	b.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eee:	6a1b      	ldr	r3, [r3, #32]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ee      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001ef8:	491a      	ldr	r1, [pc, #104]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efa:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f0a:	7dfb      	ldrb	r3, [r7, #23]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f12:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0310 	and.w	r3, r3, #16
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d008      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f46:	4907      	ldr	r1, [pc, #28]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	42420440 	.word	0x42420440

08001f70 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e03f      	b.n	8002002 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fdbe 	bl	8002b18 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2224      	movs	r2, #36	; 0x24
 8001fa0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	6812      	ldr	r2, [r2, #0]
 8001fac:	68d2      	ldr	r2, [r2, #12]
 8001fae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fb2:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f90b 	bl	80021d0 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	6912      	ldr	r2, [r2, #16]
 8001fc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6812      	ldr	r2, [r2, #0]
 8001fd2:	6952      	ldr	r2, [r2, #20]
 8001fd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fd8:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	68d2      	ldr	r2, [r2, #12]
 8001fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fe8:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200a:	b580      	push	{r7, lr}
 800200c:	b088      	sub	sp, #32
 800200e:	af02      	add	r7, sp, #8
 8002010:	60f8      	str	r0, [r7, #12]
 8002012:	60b9      	str	r1, [r7, #8]
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4613      	mov	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b20      	cmp	r3, #32
 8002028:	f040 8082 	bne.w	8002130 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL) || (Size == 0U))
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <HAL_UART_Transmit+0x2e>
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e07a      	b.n	8002132 <HAL_UART_Transmit+0x128>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_UART_Transmit+0x40>
 8002046:	2302      	movs	r3, #2
 8002048:	e073      	b.n	8002132 <HAL_UART_Transmit+0x128>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2200      	movs	r2, #0
 8002056:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2221      	movs	r2, #33	; 0x21
 800205c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002060:	f7fe f8b4 	bl	80001cc <HAL_GetTick>
 8002064:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	88fa      	ldrh	r2, [r7, #6]
 800206a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002072:	e041      	b.n	80020f8 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800208a:	d121      	bne.n	80020d0 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2200      	movs	r2, #0
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f84f 	bl	800213a <UART_WaitOnFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e045      	b.n	8002132 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	8812      	ldrh	r2, [r2, #0]
 80020b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020b6:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	3302      	adds	r3, #2
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	e017      	b.n	80020f8 <HAL_UART_Transmit+0xee>
        }
        else
        {
          pData +=1U;
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	3301      	adds	r3, #1
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	e013      	b.n	80020f8 <HAL_UART_Transmit+0xee>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	2200      	movs	r2, #0
 80020d8:	2180      	movs	r1, #128	; 0x80
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f82d 	bl	800213a <UART_WaitOnFlagUntilTimeout>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e023      	b.n	8002132 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1c59      	adds	r1, r3, #1
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1b8      	bne.n	8002074 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	2140      	movs	r1, #64	; 0x40
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f814 	bl	800213a <UART_WaitOnFlagUntilTimeout>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e00a      	b.n	8002132 <HAL_UART_Transmit+0x128>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e000      	b.n	8002132 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8002130:	2302      	movs	r3, #2
  }
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b084      	sub	sp, #16
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	4613      	mov	r3, r2
 8002148:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800214a:	e02c      	b.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002152:	d028      	beq.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0x30>
 800215a:	f7fe f837 	bl	80001cc <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	1ad2      	subs	r2, r2, r3
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	429a      	cmp	r2, r3
 8002168:	d91d      	bls.n	80021a6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	68d2      	ldr	r2, [r2, #12]
 8002174:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002178:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	6812      	ldr	r2, [r2, #0]
 8002182:	6952      	ldr	r2, [r2, #20]
 8002184:	f022 0201 	bic.w	r2, r2, #1
 8002188:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e00f      	b.n	80021c6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	bf0c      	ite	eq
 80021b6:	2301      	moveq	r3, #1
 80021b8:	2300      	movne	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d0c3      	beq.n	800214c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80021d8:	2300      	movs	r3, #0
 80021da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	6812      	ldr	r2, [r2, #0]
 80021e4:	6912      	ldr	r2, [r2, #16]
 80021e6:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	68d2      	ldr	r2, [r2, #12]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	611a      	str	r2, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, 
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002216:	f023 030c 	bic.w	r3, r3, #12
 800221a:	68f9      	ldr	r1, [r7, #12]
 800221c:	430b      	orrs	r3, r1
 800221e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	6952      	ldr	r2, [r2, #20]
 800222a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6992      	ldr	r2, [r2, #24]
 8002232:	430a      	orrs	r2, r1
 8002234:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a6f      	ldr	r2, [pc, #444]	; (80023f8 <UART_SetConfig+0x228>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d16b      	bne.n	8002318 <UART_SetConfig+0x148>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681c      	ldr	r4, [r3, #0]
 8002244:	f7ff fdac 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002248:	4602      	mov	r2, r0
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	009a      	lsls	r2, r3, #2
 8002252:	441a      	add	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	fbb2 f3f3 	udiv	r3, r2, r3
 800225e:	4a67      	ldr	r2, [pc, #412]	; (80023fc <UART_SetConfig+0x22c>)
 8002260:	fba2 2303 	umull	r2, r3, r2, r3
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	011d      	lsls	r5, r3, #4
 8002268:	f7ff fd9a 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 800226c:	4602      	mov	r2, r0
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	009a      	lsls	r2, r3, #2
 8002276:	441a      	add	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002282:	f7ff fd8d 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 8002286:	4602      	mov	r2, r0
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	009a      	lsls	r2, r3, #2
 8002290:	441a      	add	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fbb2 f3f3 	udiv	r3, r2, r3
 800229c:	4a57      	ldr	r2, [pc, #348]	; (80023fc <UART_SetConfig+0x22c>)
 800229e:	fba2 2303 	umull	r2, r3, r2, r3
 80022a2:	095b      	lsrs	r3, r3, #5
 80022a4:	2264      	movs	r2, #100	; 0x64
 80022a6:	fb02 f303 	mul.w	r3, r2, r3
 80022aa:	1af3      	subs	r3, r6, r3
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	3332      	adds	r3, #50	; 0x32
 80022b0:	4a52      	ldr	r2, [pc, #328]	; (80023fc <UART_SetConfig+0x22c>)
 80022b2:	fba2 2303 	umull	r2, r3, r2, r3
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022bc:	441d      	add	r5, r3
 80022be:	f7ff fd6f 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	009a      	lsls	r2, r3, #2
 80022cc:	441a      	add	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80022d8:	f7ff fd62 	bl	8001da0 <HAL_RCC_GetPCLK2Freq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	009a      	lsls	r2, r3, #2
 80022e6:	441a      	add	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f2:	4a42      	ldr	r2, [pc, #264]	; (80023fc <UART_SetConfig+0x22c>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	2264      	movs	r2, #100	; 0x64
 80022fc:	fb02 f303 	mul.w	r3, r2, r3
 8002300:	1af3      	subs	r3, r6, r3
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	3332      	adds	r3, #50	; 0x32
 8002306:	4a3d      	ldr	r2, [pc, #244]	; (80023fc <UART_SetConfig+0x22c>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	442b      	add	r3, r5
 8002314:	60a3      	str	r3, [r4, #8]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002316:	e06a      	b.n	80023ee <UART_SetConfig+0x21e>
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681c      	ldr	r4, [r3, #0]
 800231c:	f7ff fd2c 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002320:	4602      	mov	r2, r0
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	009a      	lsls	r2, r3, #2
 800232a:	441a      	add	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	fbb2 f3f3 	udiv	r3, r2, r3
 8002336:	4a31      	ldr	r2, [pc, #196]	; (80023fc <UART_SetConfig+0x22c>)
 8002338:	fba2 2303 	umull	r2, r3, r2, r3
 800233c:	095b      	lsrs	r3, r3, #5
 800233e:	011d      	lsls	r5, r3, #4
 8002340:	f7ff fd1a 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 8002344:	4602      	mov	r2, r0
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	009a      	lsls	r2, r3, #2
 800234e:	441a      	add	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	fbb2 f6f3 	udiv	r6, r2, r3
 800235a:	f7ff fd0d 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 800235e:	4602      	mov	r2, r0
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	009a      	lsls	r2, r3, #2
 8002368:	441a      	add	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	4a21      	ldr	r2, [pc, #132]	; (80023fc <UART_SetConfig+0x22c>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2264      	movs	r2, #100	; 0x64
 800237e:	fb02 f303 	mul.w	r3, r2, r3
 8002382:	1af3      	subs	r3, r6, r3
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	3332      	adds	r3, #50	; 0x32
 8002388:	4a1c      	ldr	r2, [pc, #112]	; (80023fc <UART_SetConfig+0x22c>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002394:	441d      	add	r5, r3
 8002396:	f7ff fcef 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 800239a:	4602      	mov	r2, r0
 800239c:	4613      	mov	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4413      	add	r3, r2
 80023a2:	009a      	lsls	r2, r3, #2
 80023a4:	441a      	add	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80023b0:	f7ff fce2 	bl	8001d78 <HAL_RCC_GetPCLK1Freq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4613      	mov	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	4413      	add	r3, r2
 80023bc:	009a      	lsls	r2, r3, #2
 80023be:	441a      	add	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <UART_SetConfig+0x22c>)
 80023cc:	fba2 2303 	umull	r2, r3, r2, r3
 80023d0:	095b      	lsrs	r3, r3, #5
 80023d2:	2264      	movs	r2, #100	; 0x64
 80023d4:	fb02 f303 	mul.w	r3, r2, r3
 80023d8:	1af3      	subs	r3, r6, r3
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	3332      	adds	r3, #50	; 0x32
 80023de:	4a07      	ldr	r2, [pc, #28]	; (80023fc <UART_SetConfig+0x22c>)
 80023e0:	fba2 2303 	umull	r2, r3, r2, r3
 80023e4:	095b      	lsrs	r3, r3, #5
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	442b      	add	r3, r5
 80023ec:	60a3      	str	r3, [r4, #8]
}
 80023ee:	bf00      	nop
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40013800 	.word	0x40013800
 80023fc:	51eb851f 	.word	0x51eb851f

08002400 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8002406:	4b4b      	ldr	r3, [pc, #300]	; (8002534 <MX_ADC1_Init+0x134>)
 8002408:	4a4b      	ldr	r2, [pc, #300]	; (8002538 <MX_ADC1_Init+0x138>)
 800240a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800240c:	4b49      	ldr	r3, [pc, #292]	; (8002534 <MX_ADC1_Init+0x134>)
 800240e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002412:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002414:	4b47      	ldr	r3, [pc, #284]	; (8002534 <MX_ADC1_Init+0x134>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800241a:	4b46      	ldr	r3, [pc, #280]	; (8002534 <MX_ADC1_Init+0x134>)
 800241c:	2200      	movs	r2, #0
 800241e:	615a      	str	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002420:	4b44      	ldr	r3, [pc, #272]	; (8002534 <MX_ADC1_Init+0x134>)
 8002422:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8002426:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002428:	4b42      	ldr	r3, [pc, #264]	; (8002534 <MX_ADC1_Init+0x134>)
 800242a:	2200      	movs	r2, #0
 800242c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 7;
 800242e:	4b41      	ldr	r3, [pc, #260]	; (8002534 <MX_ADC1_Init+0x134>)
 8002430:	2207      	movs	r2, #7
 8002432:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002434:	483f      	ldr	r0, [pc, #252]	; (8002534 <MX_ADC1_Init+0x134>)
 8002436:	f7fd fef1 	bl	800021c <HAL_ADC_Init>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <MX_ADC1_Init+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002440:	2145      	movs	r1, #69	; 0x45
 8002442:	483e      	ldr	r0, [pc, #248]	; (800253c <MX_ADC1_Init+0x13c>)
 8002444:	f000 fa70 	bl	8002928 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8002448:	2300      	movs	r3, #0
 800244a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 800244c:	2301      	movs	r3, #1
 800244e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8002450:	2306      	movs	r3, #6
 8002452:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002454:	1d3b      	adds	r3, r7, #4
 8002456:	4619      	mov	r1, r3
 8002458:	4836      	ldr	r0, [pc, #216]	; (8002534 <MX_ADC1_Init+0x134>)
 800245a:	f7fe fa29 	bl	80008b0 <HAL_ADC_ConfigChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <MX_ADC1_Init+0x6c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002464:	214f      	movs	r1, #79	; 0x4f
 8002466:	4835      	ldr	r0, [pc, #212]	; (800253c <MX_ADC1_Init+0x13c>)
 8002468:	f000 fa5e 	bl	8002928 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 800246c:	2301      	movs	r3, #1
 800246e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 2;
 8002470:	2302      	movs	r3, #2
 8002472:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	4619      	mov	r1, r3
 8002478:	482e      	ldr	r0, [pc, #184]	; (8002534 <MX_ADC1_Init+0x134>)
 800247a:	f7fe fa19 	bl	80008b0 <HAL_ADC_ConfigChannel>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <MX_ADC1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002484:	2158      	movs	r1, #88	; 0x58
 8002486:	482d      	ldr	r0, [pc, #180]	; (800253c <MX_ADC1_Init+0x13c>)
 8002488:	f000 fa4e 	bl	8002928 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 800248c:	2302      	movs	r3, #2
 800248e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 3;
 8002490:	2303      	movs	r3, #3
 8002492:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	4619      	mov	r1, r3
 8002498:	4826      	ldr	r0, [pc, #152]	; (8002534 <MX_ADC1_Init+0x134>)
 800249a:	f7fe fa09 	bl	80008b0 <HAL_ADC_ConfigChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <MX_ADC1_Init+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024a4:	2161      	movs	r1, #97	; 0x61
 80024a6:	4825      	ldr	r0, [pc, #148]	; (800253c <MX_ADC1_Init+0x13c>)
 80024a8:	f000 fa3e 	bl	8002928 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 80024ac:	2303      	movs	r3, #3
 80024ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 4;
 80024b0:	2304      	movs	r3, #4
 80024b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	4619      	mov	r1, r3
 80024b8:	481e      	ldr	r0, [pc, #120]	; (8002534 <MX_ADC1_Init+0x134>)
 80024ba:	f7fe f9f9 	bl	80008b0 <HAL_ADC_ConfigChannel>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <MX_ADC1_Init+0xcc>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024c4:	216a      	movs	r1, #106	; 0x6a
 80024c6:	481d      	ldr	r0, [pc, #116]	; (800253c <MX_ADC1_Init+0x13c>)
 80024c8:	f000 fa2e 	bl	8002928 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_4;
 80024cc:	2304      	movs	r3, #4
 80024ce:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 5;
 80024d0:	2305      	movs	r3, #5
 80024d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024d4:	1d3b      	adds	r3, r7, #4
 80024d6:	4619      	mov	r1, r3
 80024d8:	4816      	ldr	r0, [pc, #88]	; (8002534 <MX_ADC1_Init+0x134>)
 80024da:	f7fe f9e9 	bl	80008b0 <HAL_ADC_ConfigChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <MX_ADC1_Init+0xec>
  {
    _Error_Handler(__FILE__, __LINE__);
 80024e4:	2173      	movs	r1, #115	; 0x73
 80024e6:	4815      	ldr	r0, [pc, #84]	; (800253c <MX_ADC1_Init+0x13c>)
 80024e8:	f000 fa1e 	bl	8002928 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_5;
 80024ec:	2305      	movs	r3, #5
 80024ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 6;
 80024f0:	2306      	movs	r3, #6
 80024f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	4619      	mov	r1, r3
 80024f8:	480e      	ldr	r0, [pc, #56]	; (8002534 <MX_ADC1_Init+0x134>)
 80024fa:	f7fe f9d9 	bl	80008b0 <HAL_ADC_ConfigChannel>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <MX_ADC1_Init+0x10c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002504:	217c      	movs	r1, #124	; 0x7c
 8002506:	480d      	ldr	r0, [pc, #52]	; (800253c <MX_ADC1_Init+0x13c>)
 8002508:	f000 fa0e 	bl	8002928 <_Error_Handler>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_6;
 800250c:	2306      	movs	r3, #6
 800250e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 7;
 8002510:	2307      	movs	r3, #7
 8002512:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002514:	1d3b      	adds	r3, r7, #4
 8002516:	4619      	mov	r1, r3
 8002518:	4806      	ldr	r0, [pc, #24]	; (8002534 <MX_ADC1_Init+0x134>)
 800251a:	f7fe f9c9 	bl	80008b0 <HAL_ADC_ConfigChannel>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <MX_ADC1_Init+0x12c>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002524:	2185      	movs	r1, #133	; 0x85
 8002526:	4805      	ldr	r0, [pc, #20]	; (800253c <MX_ADC1_Init+0x13c>)
 8002528:	f000 f9fe 	bl	8002928 <_Error_Handler>
  }

}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200000a4 	.word	0x200000a4
 8002538:	40012400 	.word	0x40012400
 800253c:	080034c0 	.word	0x080034c0

08002540 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a27      	ldr	r2, [pc, #156]	; (80025ec <HAL_ADC_MspInit+0xac>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d147      	bne.n	80025e2 <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002552:	4a27      	ldr	r2, [pc, #156]	; (80025f0 <HAL_ADC_MspInit+0xb0>)
 8002554:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <HAL_ADC_MspInit+0xb0>)
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255c:	6193      	str	r3, [r2, #24]
 800255e:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_ADC_MspInit+0xb0>)
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800256a:	237f      	movs	r3, #127	; 0x7f
 800256c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800256e:	2303      	movs	r3, #3
 8002570:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002572:	f107 0310 	add.w	r3, r7, #16
 8002576:	4619      	mov	r1, r3
 8002578:	481e      	ldr	r0, [pc, #120]	; (80025f4 <HAL_ADC_MspInit+0xb4>)
 800257a:	f7fe fec3 	bl	8001304 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800257e:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <HAL_ADC_MspInit+0xb8>)
 8002580:	4a1e      	ldr	r2, [pc, #120]	; (80025fc <HAL_ADC_MspInit+0xbc>)
 8002582:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002584:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_ADC_MspInit+0xb8>)
 8002586:	2200      	movs	r2, #0
 8002588:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800258a:	4b1b      	ldr	r3, [pc, #108]	; (80025f8 <HAL_ADC_MspInit+0xb8>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_ADC_MspInit+0xb8>)
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002596:	4b18      	ldr	r3, [pc, #96]	; (80025f8 <HAL_ADC_MspInit+0xb8>)
 8002598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800259c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <HAL_ADC_MspInit+0xb8>)
 80025a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <HAL_ADC_MspInit+0xb8>)
 80025a8:	2220      	movs	r2, #32
 80025aa:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <HAL_ADC_MspInit+0xb8>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025b2:	4811      	ldr	r0, [pc, #68]	; (80025f8 <HAL_ADC_MspInit+0xb8>)
 80025b4:	f7fe fca0 	bl	8000ef8 <HAL_DMA_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_ADC_MspInit+0x86>
    {
      _Error_Handler(__FILE__, __LINE__);
 80025be:	21b0      	movs	r1, #176	; 0xb0
 80025c0:	480f      	ldr	r0, [pc, #60]	; (8002600 <HAL_ADC_MspInit+0xc0>)
 80025c2:	f000 f9b1 	bl	8002928 <_Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a0b      	ldr	r2, [pc, #44]	; (80025f8 <HAL_ADC_MspInit+0xb8>)
 80025ca:	621a      	str	r2, [r3, #32]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_ADC_MspInit+0xb8>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	2012      	movs	r0, #18
 80025d8:	f7fe fc2f 	bl	8000e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025dc:	2012      	movs	r0, #18
 80025de:	f7fe fc48 	bl	8000e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80025e2:	bf00      	nop
 80025e4:	3720      	adds	r7, #32
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40012400 	.word	0x40012400
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010800 	.word	0x40010800
 80025f8:	200000d4 	.word	0x200000d4
 80025fc:	40020008 	.word	0x40020008
 8002600:	080034c0 	.word	0x080034c0

08002604 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800260a:	4a0c      	ldr	r2, [pc, #48]	; (800263c <MX_DMA_Init+0x38>)
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <MX_DMA_Init+0x38>)
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	6153      	str	r3, [r2, #20]
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_DMA_Init+0x38>)
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	607b      	str	r3, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	2100      	movs	r1, #0
 8002626:	200b      	movs	r0, #11
 8002628:	f7fe fc07 	bl	8000e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800262c:	200b      	movs	r0, #11
 800262e:	f7fe fc20 	bl	8000e72 <HAL_NVIC_EnableIRQ>

}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000

08002640 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b088      	sub	sp, #32
 8002644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002646:	4a1d      	ldr	r2, [pc, #116]	; (80026bc <MX_GPIO_Init+0x7c>)
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <MX_GPIO_Init+0x7c>)
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f043 0310 	orr.w	r3, r3, #16
 8002650:	6193      	str	r3, [r2, #24]
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <MX_GPIO_Init+0x7c>)
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	60fb      	str	r3, [r7, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800265e:	4a17      	ldr	r2, [pc, #92]	; (80026bc <MX_GPIO_Init+0x7c>)
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <MX_GPIO_Init+0x7c>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f043 0320 	orr.w	r3, r3, #32
 8002668:	6193      	str	r3, [r2, #24]
 800266a:	4b14      	ldr	r3, [pc, #80]	; (80026bc <MX_GPIO_Init+0x7c>)
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	4a11      	ldr	r2, [pc, #68]	; (80026bc <MX_GPIO_Init+0x7c>)
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <MX_GPIO_Init+0x7c>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	6193      	str	r3, [r2, #24]
 8002682:	4b0e      	ldr	r3, [pc, #56]	; (80026bc <MX_GPIO_Init+0x7c>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800268e:	2200      	movs	r2, #0
 8002690:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002694:	480a      	ldr	r0, [pc, #40]	; (80026c0 <MX_GPIO_Init+0x80>)
 8002696:	f7fe ff93 	bl	80015c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800269a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800269e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a0:	2301      	movs	r3, #1
 80026a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a4:	2302      	movs	r3, #2
 80026a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	4619      	mov	r1, r3
 80026ae:	4804      	ldr	r0, [pc, #16]	; (80026c0 <MX_GPIO_Init+0x80>)
 80026b0:	f7fe fe28 	bl	8001304 <HAL_GPIO_Init>

}
 80026b4:	bf00      	nop
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40011000 	.word	0x40011000

080026c4 <HAL_ADC_ConvCpltCallback>:
/* Private function prototypes -----------------------------------------------*/

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

	uint32_t val[7];
	if (hadc->Instance  == ADC1){
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a43      	ldr	r2, [pc, #268]	; (80027e0 <HAL_ADC_ConvCpltCallback+0x11c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d17f      	bne.n	80027d6 <HAL_ADC_ConvCpltCallback+0x112>
		/*Valores dos LDRS*/
		val[0] = ADC_value[0];
 80026d6:	4b43      	ldr	r3, [pc, #268]	; (80027e4 <HAL_ADC_ConvCpltCallback+0x120>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]
		val[1] = ADC_value[1];
 80026dc:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <HAL_ADC_ConvCpltCallback+0x120>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	613b      	str	r3, [r7, #16]
		val[2] = ADC_value[2];
 80026e2:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <HAL_ADC_ConvCpltCallback+0x120>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	617b      	str	r3, [r7, #20]
		val[3] = ADC_value[3];
 80026e8:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <HAL_ADC_ConvCpltCallback+0x120>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	61bb      	str	r3, [r7, #24]
		/*Valores dos Sensores*/
		val[4] = ADC_value[4];
 80026ee:	4b3d      	ldr	r3, [pc, #244]	; (80027e4 <HAL_ADC_ConvCpltCallback+0x120>)
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	61fb      	str	r3, [r7, #28]
		val[5] = ADC_value[5];
 80026f4:	4b3b      	ldr	r3, [pc, #236]	; (80027e4 <HAL_ADC_ConvCpltCallback+0x120>)
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	623b      	str	r3, [r7, #32]
		val[6] = ADC_value[6];
 80026fa:	4b3a      	ldr	r3, [pc, #232]	; (80027e4 <HAL_ADC_ConvCpltCallback+0x120>)
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	627b      	str	r3, [r7, #36]	; 0x24


		/*Codigo dos LDRS*/


		if (val[0] > 3000){
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002706:	4293      	cmp	r3, r2
 8002708:	d906      	bls.n	8002718 <HAL_ADC_ConvCpltCallback+0x54>
			HAL_UART_Transmit(&huart1, "Poste 1 queimado\n\r", 20,1000);}
 800270a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270e:	2214      	movs	r2, #20
 8002710:	4935      	ldr	r1, [pc, #212]	; (80027e8 <HAL_ADC_ConvCpltCallback+0x124>)
 8002712:	4836      	ldr	r0, [pc, #216]	; (80027ec <HAL_ADC_ConvCpltCallback+0x128>)
 8002714:	f7ff fc79 	bl	800200a <HAL_UART_Transmit>
		if (val[1] > 3000){
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800271e:	4293      	cmp	r3, r2
 8002720:	d906      	bls.n	8002730 <HAL_ADC_ConvCpltCallback+0x6c>
					HAL_UART_Transmit(&huart1, "Poste 2 queimado\n\r", 20,1000);}
 8002722:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002726:	2214      	movs	r2, #20
 8002728:	4931      	ldr	r1, [pc, #196]	; (80027f0 <HAL_ADC_ConvCpltCallback+0x12c>)
 800272a:	4830      	ldr	r0, [pc, #192]	; (80027ec <HAL_ADC_ConvCpltCallback+0x128>)
 800272c:	f7ff fc6d 	bl	800200a <HAL_UART_Transmit>
		if (val[2] > 3000){
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002736:	4293      	cmp	r3, r2
 8002738:	d906      	bls.n	8002748 <HAL_ADC_ConvCpltCallback+0x84>
					HAL_UART_Transmit(&huart1, "Poste 3 queimado\n\r", 20,1000);}
 800273a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273e:	2214      	movs	r2, #20
 8002740:	492c      	ldr	r1, [pc, #176]	; (80027f4 <HAL_ADC_ConvCpltCallback+0x130>)
 8002742:	482a      	ldr	r0, [pc, #168]	; (80027ec <HAL_ADC_ConvCpltCallback+0x128>)
 8002744:	f7ff fc61 	bl	800200a <HAL_UART_Transmit>

		if (val[3] > 3000){
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800274e:	4293      	cmp	r3, r2
 8002750:	d906      	bls.n	8002760 <HAL_ADC_ConvCpltCallback+0x9c>
					HAL_UART_Transmit(&huart1, "Poste 4 queimado\n\r", 20,1000);}
 8002752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002756:	2214      	movs	r2, #20
 8002758:	4927      	ldr	r1, [pc, #156]	; (80027f8 <HAL_ADC_ConvCpltCallback+0x134>)
 800275a:	4824      	ldr	r0, [pc, #144]	; (80027ec <HAL_ADC_ConvCpltCallback+0x128>)
 800275c:	f7ff fc55 	bl	800200a <HAL_UART_Transmit>

		/*Codigo dos sensores*/

		//Se os carros estiverem parados os sensores vao estar acionando sem parar
		if (val[4] > 3500 && val[5] > 3500){
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002766:	4293      	cmp	r3, r2
 8002768:	d90c      	bls.n	8002784 <HAL_ADC_ConvCpltCallback+0xc0>
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002770:	4293      	cmp	r3, r2
 8002772:	d907      	bls.n	8002784 <HAL_ADC_ConvCpltCallback+0xc0>

			HAL_UART_Transmit(&huart1, "Rodovia congestionada \n\r", 25,1000);}
 8002774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002778:	2219      	movs	r2, #25
 800277a:	4920      	ldr	r1, [pc, #128]	; (80027fc <HAL_ADC_ConvCpltCallback+0x138>)
 800277c:	481b      	ldr	r0, [pc, #108]	; (80027ec <HAL_ADC_ConvCpltCallback+0x128>)
 800277e:	f7ff fc44 	bl	800200a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)espaco, sizeof(espaco), 100);
			HAL_UART_Transmit(&huart1, (uint8_t*)hashtag, sizeof(hashtag), 100);
			//HAL_UART_Transmit(&huart1,  "\n", 2,1000);
		}}

		}
 8002782:	e028      	b.n	80027d6 <HAL_ADC_ConvCpltCallback+0x112>
			if (val[6] > 3300 ){
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	f640 42e4 	movw	r2, #3300	; 0xce4
 800278a:	4293      	cmp	r3, r2
 800278c:	d923      	bls.n	80027d6 <HAL_ADC_ConvCpltCallback+0x112>
			contador = contador + 1;
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <HAL_ADC_ConvCpltCallback+0x13c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <HAL_ADC_ConvCpltCallback+0x13c>)
 8002796:	6013      	str	r3, [r2, #0]
			sprintf(str,"%d", contador);
 8002798:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_ADC_ConvCpltCallback+0x13c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4919      	ldr	r1, [pc, #100]	; (8002804 <HAL_ADC_ConvCpltCallback+0x140>)
 80027a0:	4819      	ldr	r0, [pc, #100]	; (8002808 <HAL_ADC_ConvCpltCallback+0x144>)
 80027a2:	f000 fa3d 	bl	8002c20 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)e, sizeof(e), 100);
 80027a6:	2364      	movs	r3, #100	; 0x64
 80027a8:	2202      	movs	r2, #2
 80027aa:	4918      	ldr	r1, [pc, #96]	; (800280c <HAL_ADC_ConvCpltCallback+0x148>)
 80027ac:	480f      	ldr	r0, [pc, #60]	; (80027ec <HAL_ADC_ConvCpltCallback+0x128>)
 80027ae:	f7ff fc2c 	bl	800200a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, str ,4,100);
 80027b2:	2364      	movs	r3, #100	; 0x64
 80027b4:	2204      	movs	r2, #4
 80027b6:	4914      	ldr	r1, [pc, #80]	; (8002808 <HAL_ADC_ConvCpltCallback+0x144>)
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <HAL_ADC_ConvCpltCallback+0x128>)
 80027ba:	f7ff fc26 	bl	800200a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)espaco, sizeof(espaco), 100);
 80027be:	2364      	movs	r3, #100	; 0x64
 80027c0:	2202      	movs	r2, #2
 80027c2:	4913      	ldr	r1, [pc, #76]	; (8002810 <HAL_ADC_ConvCpltCallback+0x14c>)
 80027c4:	4809      	ldr	r0, [pc, #36]	; (80027ec <HAL_ADC_ConvCpltCallback+0x128>)
 80027c6:	f7ff fc20 	bl	800200a <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart1, (uint8_t*)hashtag, sizeof(hashtag), 100);
 80027ca:	2364      	movs	r3, #100	; 0x64
 80027cc:	2202      	movs	r2, #2
 80027ce:	4911      	ldr	r1, [pc, #68]	; (8002814 <HAL_ADC_ConvCpltCallback+0x150>)
 80027d0:	4806      	ldr	r0, [pc, #24]	; (80027ec <HAL_ADC_ConvCpltCallback+0x128>)
 80027d2:	f7ff fc1a 	bl	800200a <HAL_UART_Transmit>
		}
 80027d6:	bf00      	nop
 80027d8:	3728      	adds	r7, #40	; 0x28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40012400 	.word	0x40012400
 80027e4:	20000118 	.word	0x20000118
 80027e8:	080034d0 	.word	0x080034d0
 80027ec:	20000138 	.word	0x20000138
 80027f0:	080034e4 	.word	0x080034e4
 80027f4:	080034f8 	.word	0x080034f8
 80027f8:	0800350c 	.word	0x0800350c
 80027fc:	08003520 	.word	0x08003520
 8002800:	20000090 	.word	0x20000090
 8002804:	0800353c 	.word	0x0800353c
 8002808:	20000134 	.word	0x20000134
 800280c:	20000004 	.word	0x20000004
 8002810:	20000000 	.word	0x20000000
 8002814:	20000008 	.word	0x20000008

08002818 <main>:


/* USER CODE END 0 */

int main(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800281c:	f7fd fc96 	bl	800014c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002820:	f000 f81e 	bl	8002860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002824:	f7ff ff0c 	bl	8002640 <MX_GPIO_Init>
  MX_DMA_Init();
 8002828:	f7ff feec 	bl	8002604 <MX_DMA_Init>
  MX_ADC1_Init();
 800282c:	f7ff fde8 	bl	8002400 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002830:	f000 f944 	bl	8002abc <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */
HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_value,7);
 8002834:	2207      	movs	r2, #7
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <main+0x40>)
 8002838:	4808      	ldr	r0, [pc, #32]	; (800285c <main+0x44>)
 800283a:	f7fd fe7d 	bl	8000538 <HAL_ADC_Start_DMA>
HAL_ADC_Start_IT(&hadc1);
 800283e:	4807      	ldr	r0, [pc, #28]	; (800285c <main+0x44>)
 8002840:	f7fd fdc4 	bl	80003cc <HAL_ADC_Start_IT>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_IT(&hadc1);
 8002844:	4805      	ldr	r0, [pc, #20]	; (800285c <main+0x44>)
 8002846:	f7fd fdc1 	bl	80003cc <HAL_ADC_Start_IT>
	  HAL_Delay(100);
 800284a:	2064      	movs	r0, #100	; 0x64
 800284c:	f7fd fcc8 	bl	80001e0 <HAL_Delay>


	  HAL_Delay(100);
 8002850:	2064      	movs	r0, #100	; 0x64
 8002852:	f7fd fcc5 	bl	80001e0 <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc1);
 8002856:	e7f5      	b.n	8002844 <main+0x2c>
 8002858:	20000118 	.word	0x20000118
 800285c:	200000a4 	.word	0x200000a4

08002860 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b094      	sub	sp, #80	; 0x50
 8002864:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002866:	2301      	movs	r3, #1
 8002868:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800286a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800286e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002870:	2300      	movs	r3, #0
 8002872:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002874:	2301      	movs	r3, #1
 8002876:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002878:	2302      	movs	r3, #2
 800287a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800287c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002880:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002882:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002886:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe feaf 	bl	80015f0 <HAL_RCC_OscConfig>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002898:	21cd      	movs	r1, #205	; 0xcd
 800289a:	4821      	ldr	r0, [pc, #132]	; (8002920 <SystemClock_Config+0xc0>)
 800289c:	f000 f844 	bl	8002928 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028a0:	230f      	movs	r3, #15
 80028a2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028a4:	2302      	movs	r3, #2
 80028a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028a8:	2300      	movs	r3, #0
 80028aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028b0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028b2:	2300      	movs	r3, #0
 80028b4:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	2102      	movs	r1, #2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff f8fb 	bl	8001ab8 <HAL_RCC_ClockConfig>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <SystemClock_Config+0x70>
  {
    _Error_Handler(__FILE__, __LINE__);
 80028c8:	21db      	movs	r1, #219	; 0xdb
 80028ca:	4815      	ldr	r0, [pc, #84]	; (8002920 <SystemClock_Config+0xc0>)
 80028cc:	f000 f82c 	bl	8002928 <_Error_Handler>
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80028d0:	2302      	movs	r3, #2
 80028d2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80028d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028d8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028da:	1d3b      	adds	r3, r7, #4
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fa91 	bl	8001e04 <HAL_RCCEx_PeriphCLKConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <SystemClock_Config+0x90>
  {
    _Error_Handler(__FILE__, __LINE__);
 80028e8:	21e2      	movs	r1, #226	; 0xe2
 80028ea:	480d      	ldr	r0, [pc, #52]	; (8002920 <SystemClock_Config+0xc0>)
 80028ec:	f000 f81c 	bl	8002928 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80028f0:	f7ff fa38 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <SystemClock_Config+0xc4>)
 80028f8:	fba3 2302 	umull	r2, r3, r3, r2
 80028fc:	099b      	lsrs	r3, r3, #6
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fe fac5 	bl	8000e8e <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002904:	2004      	movs	r0, #4
 8002906:	f7fe facf 	bl	8000ea8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	f04f 30ff 	mov.w	r0, #4294967295
 8002912:	f7fe fa92 	bl	8000e3a <HAL_NVIC_SetPriority>
}
 8002916:	bf00      	nop
 8002918:	3750      	adds	r7, #80	; 0x50
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	08003540 	.word	0x08003540
 8002924:	10624dd3 	.word	0x10624dd3

08002928 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8002932:	e7fe      	b.n	8002932 <_Error_Handler+0xa>

08002934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800293a:	4a24      	ldr	r2, [pc, #144]	; (80029cc <HAL_MspInit+0x98>)
 800293c:	4b23      	ldr	r3, [pc, #140]	; (80029cc <HAL_MspInit+0x98>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6193      	str	r3, [r2, #24]
 8002946:	4b21      	ldr	r3, [pc, #132]	; (80029cc <HAL_MspInit+0x98>)
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002952:	2003      	movs	r0, #3
 8002954:	f7fe fa66 	bl	8000e24 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002958:	2200      	movs	r2, #0
 800295a:	2100      	movs	r1, #0
 800295c:	f06f 000b 	mvn.w	r0, #11
 8002960:	f7fe fa6b 	bl	8000e3a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	f06f 000a 	mvn.w	r0, #10
 800296c:	f7fe fa65 	bl	8000e3a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002970:	2200      	movs	r2, #0
 8002972:	2100      	movs	r1, #0
 8002974:	f06f 0009 	mvn.w	r0, #9
 8002978:	f7fe fa5f 	bl	8000e3a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800297c:	2200      	movs	r2, #0
 800297e:	2100      	movs	r1, #0
 8002980:	f06f 0004 	mvn.w	r0, #4
 8002984:	f7fe fa59 	bl	8000e3a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002988:	2200      	movs	r2, #0
 800298a:	2100      	movs	r1, #0
 800298c:	f06f 0003 	mvn.w	r0, #3
 8002990:	f7fe fa53 	bl	8000e3a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002994:	2200      	movs	r2, #0
 8002996:	2100      	movs	r1, #0
 8002998:	f06f 0001 	mvn.w	r0, #1
 800299c:	f7fe fa4d 	bl	8000e3a <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	2100      	movs	r1, #0
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295
 80029a8:	f7fe fa47 	bl	8000e3a <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029ac:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <HAL_MspInit+0x9c>)
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <HAL_MspInit+0x9c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029b6:	6053      	str	r3, [r2, #4]
 80029b8:	4a05      	ldr	r2, [pc, #20]	; (80029d0 <HAL_MspInit+0x9c>)
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_MspInit+0x9c>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029c2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029c4:	bf00      	nop
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	40010000 	.word	0x40010000

080029d4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e4:	e7fe      	b.n	80029e4 <HardFault_Handler+0x4>

080029e6 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029ea:	e7fe      	b.n	80029ea <MemManage_Handler+0x4>

080029ec <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <BusFault_Handler+0x4>

080029f2 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f6:	e7fe      	b.n	80029f6 <UsageFault_Handler+0x4>

080029f8 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bc80      	pop	{r7}
 8002a02:	4770      	bx	lr

08002a04 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a20:	f7fd fbc6 	bl	80001b0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002a24:	f7fe fa5c 	bl	8000ee0 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel1 global interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <DMA1_Channel1_IRQHandler+0x10>)
 8002a32:	f7fe fb27 	bl	8001084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200000d4 	.word	0x200000d4

08002a40 <ADC1_2_IRQHandler>:

/**
* @brief This function handles ADC1 and ADC2 global interrupts.
*/
void ADC1_2_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <ADC1_2_IRQHandler+0x10>)
 8002a46:	f7fd fe55 	bl	80006f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	200000a4 	.word	0x200000a4

08002a54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002a58:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <SystemInit+0x5c>)
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <SystemInit+0x5c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002a64:	4912      	ldr	r1, [pc, #72]	; (8002ab0 <SystemInit+0x5c>)
 8002a66:	4b12      	ldr	r3, [pc, #72]	; (8002ab0 <SystemInit+0x5c>)
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <SystemInit+0x60>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002a70:	4a0f      	ldr	r2, [pc, #60]	; (8002ab0 <SystemInit+0x5c>)
 8002a72:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <SystemInit+0x5c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a7e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a80:	4a0b      	ldr	r2, [pc, #44]	; (8002ab0 <SystemInit+0x5c>)
 8002a82:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <SystemInit+0x5c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002a8c:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <SystemInit+0x5c>)
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <SystemInit+0x5c>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002a96:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002a98:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <SystemInit+0x5c>)
 8002a9a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002a9e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002aa0:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <SystemInit+0x64>)
 8002aa2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aa6:	609a      	str	r2, [r3, #8]
#endif 
}
 8002aa8:	bf00      	nop
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	f8ff0000 	.word	0xf8ff0000
 8002ab8:	e000ed00 	.word	0xe000ed00

08002abc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <MX_USART1_UART_Init+0x50>)
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <MX_USART1_UART_Init+0x54>)
 8002ac4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002ac6:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <MX_USART1_UART_Init+0x50>)
 8002ac8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002acc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ace:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <MX_USART1_UART_Init+0x50>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ad4:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <MX_USART1_UART_Init+0x50>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <MX_USART1_UART_Init+0x50>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ae0:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <MX_USART1_UART_Init+0x50>)
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ae6:	4b09      	ldr	r3, [pc, #36]	; (8002b0c <MX_USART1_UART_Init+0x50>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <MX_USART1_UART_Init+0x50>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002af2:	4806      	ldr	r0, [pc, #24]	; (8002b0c <MX_USART1_UART_Init+0x50>)
 8002af4:	f7ff fa3c 	bl	8001f70 <HAL_UART_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <MX_USART1_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8002afe:	2142      	movs	r1, #66	; 0x42
 8002b00:	4804      	ldr	r0, [pc, #16]	; (8002b14 <MX_USART1_UART_Init+0x58>)
 8002b02:	f7ff ff11 	bl	8002928 <_Error_Handler>
  }

}
 8002b06:	bf00      	nop
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000138 	.word	0x20000138
 8002b10:	40013800 	.word	0x40013800
 8002b14:	08003550 	.word	0x08003550

08002b18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b088      	sub	sp, #32
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <HAL_UART_MspInit+0x68>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d125      	bne.n	8002b76 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b2a:	4a16      	ldr	r2, [pc, #88]	; (8002b84 <HAL_UART_MspInit+0x6c>)
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <HAL_UART_MspInit+0x6c>)
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b34:	6193      	str	r3, [r2, #24]
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <HAL_UART_MspInit+0x6c>)
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b48:	2302      	movs	r3, #2
 8002b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b50:	f107 0310 	add.w	r3, r7, #16
 8002b54:	4619      	mov	r1, r3
 8002b56:	480c      	ldr	r0, [pc, #48]	; (8002b88 <HAL_UART_MspInit+0x70>)
 8002b58:	f7fe fbd4 	bl	8001304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b62:	2300      	movs	r3, #0
 8002b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f107 0310 	add.w	r3, r7, #16
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4805      	ldr	r0, [pc, #20]	; (8002b88 <HAL_UART_MspInit+0x70>)
 8002b72:	f7fe fbc7 	bl	8001304 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b76:	bf00      	nop
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40013800 	.word	0x40013800
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40010800 	.word	0x40010800

08002b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002b8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002b8e:	e003      	b.n	8002b98 <LoopCopyDataInit>

08002b90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002b92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002b94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002b96:	3104      	adds	r1, #4

08002b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002b98:	480a      	ldr	r0, [pc, #40]	; (8002bc4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002b9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002b9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002ba0:	d3f6      	bcc.n	8002b90 <CopyDataInit>
  ldr r2, =_sbss
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002ba4:	e002      	b.n	8002bac <LoopFillZerobss>

08002ba6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002ba6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002ba8:	f842 3b04 	str.w	r3, [r2], #4

08002bac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002bac:	4b08      	ldr	r3, [pc, #32]	; (8002bd0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002bae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002bb0:	d3f9      	bcc.n	8002ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002bb2:	f7ff ff4f 	bl	8002a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bb6:	f000 f80f 	bl	8002bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bba:	f7ff fe2d 	bl	8002818 <main>
  bx lr
 8002bbe:	4770      	bx	lr
  ldr r3, =_sidata
 8002bc0:	080035b4 	.word	0x080035b4
  ldr r0, =_sdata
 8002bc4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002bc8:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8002bcc:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8002bd0:	2000017c 	.word	0x2000017c

08002bd4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bd4:	e7fe      	b.n	8002bd4 <CAN1_RX1_IRQHandler>
	...

08002bd8 <__libc_init_array>:
 8002bd8:	b570      	push	{r4, r5, r6, lr}
 8002bda:	2500      	movs	r5, #0
 8002bdc:	4e0c      	ldr	r6, [pc, #48]	; (8002c10 <__libc_init_array+0x38>)
 8002bde:	4c0d      	ldr	r4, [pc, #52]	; (8002c14 <__libc_init_array+0x3c>)
 8002be0:	1ba4      	subs	r4, r4, r6
 8002be2:	10a4      	asrs	r4, r4, #2
 8002be4:	42a5      	cmp	r5, r4
 8002be6:	d109      	bne.n	8002bfc <__libc_init_array+0x24>
 8002be8:	f000 fc54 	bl	8003494 <_init>
 8002bec:	2500      	movs	r5, #0
 8002bee:	4e0a      	ldr	r6, [pc, #40]	; (8002c18 <__libc_init_array+0x40>)
 8002bf0:	4c0a      	ldr	r4, [pc, #40]	; (8002c1c <__libc_init_array+0x44>)
 8002bf2:	1ba4      	subs	r4, r4, r6
 8002bf4:	10a4      	asrs	r4, r4, #2
 8002bf6:	42a5      	cmp	r5, r4
 8002bf8:	d105      	bne.n	8002c06 <__libc_init_array+0x2e>
 8002bfa:	bd70      	pop	{r4, r5, r6, pc}
 8002bfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c00:	4798      	blx	r3
 8002c02:	3501      	adds	r5, #1
 8002c04:	e7ee      	b.n	8002be4 <__libc_init_array+0xc>
 8002c06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c0a:	4798      	blx	r3
 8002c0c:	3501      	adds	r5, #1
 8002c0e:	e7f2      	b.n	8002bf6 <__libc_init_array+0x1e>
 8002c10:	080035ac 	.word	0x080035ac
 8002c14:	080035ac 	.word	0x080035ac
 8002c18:	080035ac 	.word	0x080035ac
 8002c1c:	080035b0 	.word	0x080035b0

08002c20 <siprintf>:
 8002c20:	b40e      	push	{r1, r2, r3}
 8002c22:	f44f 7102 	mov.w	r1, #520	; 0x208
 8002c26:	b500      	push	{lr}
 8002c28:	b09c      	sub	sp, #112	; 0x70
 8002c2a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002c2e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c32:	9104      	str	r1, [sp, #16]
 8002c34:	9107      	str	r1, [sp, #28]
 8002c36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8002c3c:	9002      	str	r0, [sp, #8]
 8002c3e:	9006      	str	r0, [sp, #24]
 8002c40:	4808      	ldr	r0, [pc, #32]	; (8002c64 <siprintf+0x44>)
 8002c42:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c46:	f8ad 1016 	strh.w	r1, [sp, #22]
 8002c4a:	6800      	ldr	r0, [r0, #0]
 8002c4c:	a902      	add	r1, sp, #8
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	f000 f866 	bl	8002d20 <_svfiprintf_r>
 8002c54:	2200      	movs	r2, #0
 8002c56:	9b02      	ldr	r3, [sp, #8]
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	b01c      	add	sp, #112	; 0x70
 8002c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c60:	b003      	add	sp, #12
 8002c62:	4770      	bx	lr
 8002c64:	20000010 	.word	0x20000010

08002c68 <__ssputs_r>:
 8002c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c6c:	688e      	ldr	r6, [r1, #8]
 8002c6e:	4682      	mov	sl, r0
 8002c70:	429e      	cmp	r6, r3
 8002c72:	460c      	mov	r4, r1
 8002c74:	4691      	mov	r9, r2
 8002c76:	4698      	mov	r8, r3
 8002c78:	d835      	bhi.n	8002ce6 <__ssputs_r+0x7e>
 8002c7a:	898a      	ldrh	r2, [r1, #12]
 8002c7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c80:	d031      	beq.n	8002ce6 <__ssputs_r+0x7e>
 8002c82:	2302      	movs	r3, #2
 8002c84:	6825      	ldr	r5, [r4, #0]
 8002c86:	6909      	ldr	r1, [r1, #16]
 8002c88:	1a6f      	subs	r7, r5, r1
 8002c8a:	6965      	ldr	r5, [r4, #20]
 8002c8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c90:	fb95 f5f3 	sdiv	r5, r5, r3
 8002c94:	f108 0301 	add.w	r3, r8, #1
 8002c98:	443b      	add	r3, r7
 8002c9a:	429d      	cmp	r5, r3
 8002c9c:	bf38      	it	cc
 8002c9e:	461d      	movcc	r5, r3
 8002ca0:	0553      	lsls	r3, r2, #21
 8002ca2:	d531      	bpl.n	8002d08 <__ssputs_r+0xa0>
 8002ca4:	4629      	mov	r1, r5
 8002ca6:	f000 fb47 	bl	8003338 <_malloc_r>
 8002caa:	4606      	mov	r6, r0
 8002cac:	b950      	cbnz	r0, 8002cc4 <__ssputs_r+0x5c>
 8002cae:	230c      	movs	r3, #12
 8002cb0:	f8ca 3000 	str.w	r3, [sl]
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cbe:	81a3      	strh	r3, [r4, #12]
 8002cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cc4:	463a      	mov	r2, r7
 8002cc6:	6921      	ldr	r1, [r4, #16]
 8002cc8:	f000 fac4 	bl	8003254 <memcpy>
 8002ccc:	89a3      	ldrh	r3, [r4, #12]
 8002cce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cd6:	81a3      	strh	r3, [r4, #12]
 8002cd8:	6126      	str	r6, [r4, #16]
 8002cda:	443e      	add	r6, r7
 8002cdc:	6026      	str	r6, [r4, #0]
 8002cde:	4646      	mov	r6, r8
 8002ce0:	6165      	str	r5, [r4, #20]
 8002ce2:	1bed      	subs	r5, r5, r7
 8002ce4:	60a5      	str	r5, [r4, #8]
 8002ce6:	4546      	cmp	r6, r8
 8002ce8:	bf28      	it	cs
 8002cea:	4646      	movcs	r6, r8
 8002cec:	4649      	mov	r1, r9
 8002cee:	4632      	mov	r2, r6
 8002cf0:	6820      	ldr	r0, [r4, #0]
 8002cf2:	f000 faba 	bl	800326a <memmove>
 8002cf6:	68a3      	ldr	r3, [r4, #8]
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	1b9b      	subs	r3, r3, r6
 8002cfc:	60a3      	str	r3, [r4, #8]
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	441e      	add	r6, r3
 8002d02:	6026      	str	r6, [r4, #0]
 8002d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d08:	462a      	mov	r2, r5
 8002d0a:	f000 fb73 	bl	80033f4 <_realloc_r>
 8002d0e:	4606      	mov	r6, r0
 8002d10:	2800      	cmp	r0, #0
 8002d12:	d1e1      	bne.n	8002cd8 <__ssputs_r+0x70>
 8002d14:	6921      	ldr	r1, [r4, #16]
 8002d16:	4650      	mov	r0, sl
 8002d18:	f000 fac2 	bl	80032a0 <_free_r>
 8002d1c:	e7c7      	b.n	8002cae <__ssputs_r+0x46>
	...

08002d20 <_svfiprintf_r>:
 8002d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d24:	b09d      	sub	sp, #116	; 0x74
 8002d26:	9303      	str	r3, [sp, #12]
 8002d28:	898b      	ldrh	r3, [r1, #12]
 8002d2a:	4680      	mov	r8, r0
 8002d2c:	061c      	lsls	r4, r3, #24
 8002d2e:	460d      	mov	r5, r1
 8002d30:	4616      	mov	r6, r2
 8002d32:	d50f      	bpl.n	8002d54 <_svfiprintf_r+0x34>
 8002d34:	690b      	ldr	r3, [r1, #16]
 8002d36:	b96b      	cbnz	r3, 8002d54 <_svfiprintf_r+0x34>
 8002d38:	2140      	movs	r1, #64	; 0x40
 8002d3a:	f000 fafd 	bl	8003338 <_malloc_r>
 8002d3e:	6028      	str	r0, [r5, #0]
 8002d40:	6128      	str	r0, [r5, #16]
 8002d42:	b928      	cbnz	r0, 8002d50 <_svfiprintf_r+0x30>
 8002d44:	230c      	movs	r3, #12
 8002d46:	f8c8 3000 	str.w	r3, [r8]
 8002d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4e:	e0c4      	b.n	8002eda <_svfiprintf_r+0x1ba>
 8002d50:	2340      	movs	r3, #64	; 0x40
 8002d52:	616b      	str	r3, [r5, #20]
 8002d54:	2300      	movs	r3, #0
 8002d56:	9309      	str	r3, [sp, #36]	; 0x24
 8002d58:	2320      	movs	r3, #32
 8002d5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d5e:	2330      	movs	r3, #48	; 0x30
 8002d60:	f04f 0b01 	mov.w	fp, #1
 8002d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d68:	4637      	mov	r7, r6
 8002d6a:	463c      	mov	r4, r7
 8002d6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d13c      	bne.n	8002dee <_svfiprintf_r+0xce>
 8002d74:	ebb7 0a06 	subs.w	sl, r7, r6
 8002d78:	d00b      	beq.n	8002d92 <_svfiprintf_r+0x72>
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	4632      	mov	r2, r6
 8002d7e:	4629      	mov	r1, r5
 8002d80:	4640      	mov	r0, r8
 8002d82:	f7ff ff71 	bl	8002c68 <__ssputs_r>
 8002d86:	3001      	adds	r0, #1
 8002d88:	f000 80a2 	beq.w	8002ed0 <_svfiprintf_r+0x1b0>
 8002d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d8e:	4453      	add	r3, sl
 8002d90:	9309      	str	r3, [sp, #36]	; 0x24
 8002d92:	783b      	ldrb	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 809b 	beq.w	8002ed0 <_svfiprintf_r+0x1b0>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002da0:	9304      	str	r3, [sp, #16]
 8002da2:	9307      	str	r3, [sp, #28]
 8002da4:	9205      	str	r2, [sp, #20]
 8002da6:	9306      	str	r3, [sp, #24]
 8002da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dac:	931a      	str	r3, [sp, #104]	; 0x68
 8002dae:	2205      	movs	r2, #5
 8002db0:	7821      	ldrb	r1, [r4, #0]
 8002db2:	4850      	ldr	r0, [pc, #320]	; (8002ef4 <_svfiprintf_r+0x1d4>)
 8002db4:	f000 fa40 	bl	8003238 <memchr>
 8002db8:	1c67      	adds	r7, r4, #1
 8002dba:	9b04      	ldr	r3, [sp, #16]
 8002dbc:	b9d8      	cbnz	r0, 8002df6 <_svfiprintf_r+0xd6>
 8002dbe:	06d9      	lsls	r1, r3, #27
 8002dc0:	bf44      	itt	mi
 8002dc2:	2220      	movmi	r2, #32
 8002dc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dc8:	071a      	lsls	r2, r3, #28
 8002dca:	bf44      	itt	mi
 8002dcc:	222b      	movmi	r2, #43	; 0x2b
 8002dce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002dd2:	7822      	ldrb	r2, [r4, #0]
 8002dd4:	2a2a      	cmp	r2, #42	; 0x2a
 8002dd6:	d016      	beq.n	8002e06 <_svfiprintf_r+0xe6>
 8002dd8:	2100      	movs	r1, #0
 8002dda:	200a      	movs	r0, #10
 8002ddc:	9a07      	ldr	r2, [sp, #28]
 8002dde:	4627      	mov	r7, r4
 8002de0:	783b      	ldrb	r3, [r7, #0]
 8002de2:	3401      	adds	r4, #1
 8002de4:	3b30      	subs	r3, #48	; 0x30
 8002de6:	2b09      	cmp	r3, #9
 8002de8:	d950      	bls.n	8002e8c <_svfiprintf_r+0x16c>
 8002dea:	b1c9      	cbz	r1, 8002e20 <_svfiprintf_r+0x100>
 8002dec:	e011      	b.n	8002e12 <_svfiprintf_r+0xf2>
 8002dee:	2b25      	cmp	r3, #37	; 0x25
 8002df0:	d0c0      	beq.n	8002d74 <_svfiprintf_r+0x54>
 8002df2:	4627      	mov	r7, r4
 8002df4:	e7b9      	b.n	8002d6a <_svfiprintf_r+0x4a>
 8002df6:	4a3f      	ldr	r2, [pc, #252]	; (8002ef4 <_svfiprintf_r+0x1d4>)
 8002df8:	463c      	mov	r4, r7
 8002dfa:	1a80      	subs	r0, r0, r2
 8002dfc:	fa0b f000 	lsl.w	r0, fp, r0
 8002e00:	4318      	orrs	r0, r3
 8002e02:	9004      	str	r0, [sp, #16]
 8002e04:	e7d3      	b.n	8002dae <_svfiprintf_r+0x8e>
 8002e06:	9a03      	ldr	r2, [sp, #12]
 8002e08:	1d11      	adds	r1, r2, #4
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	9103      	str	r1, [sp, #12]
 8002e0e:	2a00      	cmp	r2, #0
 8002e10:	db01      	blt.n	8002e16 <_svfiprintf_r+0xf6>
 8002e12:	9207      	str	r2, [sp, #28]
 8002e14:	e004      	b.n	8002e20 <_svfiprintf_r+0x100>
 8002e16:	4252      	negs	r2, r2
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	9207      	str	r2, [sp, #28]
 8002e1e:	9304      	str	r3, [sp, #16]
 8002e20:	783b      	ldrb	r3, [r7, #0]
 8002e22:	2b2e      	cmp	r3, #46	; 0x2e
 8002e24:	d10d      	bne.n	8002e42 <_svfiprintf_r+0x122>
 8002e26:	787b      	ldrb	r3, [r7, #1]
 8002e28:	1c79      	adds	r1, r7, #1
 8002e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8002e2c:	d132      	bne.n	8002e94 <_svfiprintf_r+0x174>
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	3702      	adds	r7, #2
 8002e32:	1d1a      	adds	r2, r3, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	9203      	str	r2, [sp, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bfb8      	it	lt
 8002e3c:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e40:	9305      	str	r3, [sp, #20]
 8002e42:	4c2d      	ldr	r4, [pc, #180]	; (8002ef8 <_svfiprintf_r+0x1d8>)
 8002e44:	2203      	movs	r2, #3
 8002e46:	7839      	ldrb	r1, [r7, #0]
 8002e48:	4620      	mov	r0, r4
 8002e4a:	f000 f9f5 	bl	8003238 <memchr>
 8002e4e:	b138      	cbz	r0, 8002e60 <_svfiprintf_r+0x140>
 8002e50:	2340      	movs	r3, #64	; 0x40
 8002e52:	1b00      	subs	r0, r0, r4
 8002e54:	fa03 f000 	lsl.w	r0, r3, r0
 8002e58:	9b04      	ldr	r3, [sp, #16]
 8002e5a:	3701      	adds	r7, #1
 8002e5c:	4303      	orrs	r3, r0
 8002e5e:	9304      	str	r3, [sp, #16]
 8002e60:	7839      	ldrb	r1, [r7, #0]
 8002e62:	2206      	movs	r2, #6
 8002e64:	4825      	ldr	r0, [pc, #148]	; (8002efc <_svfiprintf_r+0x1dc>)
 8002e66:	1c7e      	adds	r6, r7, #1
 8002e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e6c:	f000 f9e4 	bl	8003238 <memchr>
 8002e70:	2800      	cmp	r0, #0
 8002e72:	d035      	beq.n	8002ee0 <_svfiprintf_r+0x1c0>
 8002e74:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <_svfiprintf_r+0x1e0>)
 8002e76:	b9fb      	cbnz	r3, 8002eb8 <_svfiprintf_r+0x198>
 8002e78:	9b03      	ldr	r3, [sp, #12]
 8002e7a:	3307      	adds	r3, #7
 8002e7c:	f023 0307 	bic.w	r3, r3, #7
 8002e80:	3308      	adds	r3, #8
 8002e82:	9303      	str	r3, [sp, #12]
 8002e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e86:	444b      	add	r3, r9
 8002e88:	9309      	str	r3, [sp, #36]	; 0x24
 8002e8a:	e76d      	b.n	8002d68 <_svfiprintf_r+0x48>
 8002e8c:	fb00 3202 	mla	r2, r0, r2, r3
 8002e90:	2101      	movs	r1, #1
 8002e92:	e7a4      	b.n	8002dde <_svfiprintf_r+0xbe>
 8002e94:	2300      	movs	r3, #0
 8002e96:	240a      	movs	r4, #10
 8002e98:	4618      	mov	r0, r3
 8002e9a:	9305      	str	r3, [sp, #20]
 8002e9c:	460f      	mov	r7, r1
 8002e9e:	783a      	ldrb	r2, [r7, #0]
 8002ea0:	3101      	adds	r1, #1
 8002ea2:	3a30      	subs	r2, #48	; 0x30
 8002ea4:	2a09      	cmp	r2, #9
 8002ea6:	d903      	bls.n	8002eb0 <_svfiprintf_r+0x190>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0ca      	beq.n	8002e42 <_svfiprintf_r+0x122>
 8002eac:	9005      	str	r0, [sp, #20]
 8002eae:	e7c8      	b.n	8002e42 <_svfiprintf_r+0x122>
 8002eb0:	fb04 2000 	mla	r0, r4, r0, r2
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e7f1      	b.n	8002e9c <_svfiprintf_r+0x17c>
 8002eb8:	ab03      	add	r3, sp, #12
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	462a      	mov	r2, r5
 8002ebe:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <_svfiprintf_r+0x1e4>)
 8002ec0:	a904      	add	r1, sp, #16
 8002ec2:	4640      	mov	r0, r8
 8002ec4:	f3af 8000 	nop.w
 8002ec8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002ecc:	4681      	mov	r9, r0
 8002ece:	d1d9      	bne.n	8002e84 <_svfiprintf_r+0x164>
 8002ed0:	89ab      	ldrh	r3, [r5, #12]
 8002ed2:	065b      	lsls	r3, r3, #25
 8002ed4:	f53f af39 	bmi.w	8002d4a <_svfiprintf_r+0x2a>
 8002ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002eda:	b01d      	add	sp, #116	; 0x74
 8002edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee0:	ab03      	add	r3, sp, #12
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	462a      	mov	r2, r5
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <_svfiprintf_r+0x1e4>)
 8002ee8:	a904      	add	r1, sp, #16
 8002eea:	4640      	mov	r0, r8
 8002eec:	f000 f884 	bl	8002ff8 <_printf_i>
 8002ef0:	e7ea      	b.n	8002ec8 <_svfiprintf_r+0x1a8>
 8002ef2:	bf00      	nop
 8002ef4:	08003578 	.word	0x08003578
 8002ef8:	0800357e 	.word	0x0800357e
 8002efc:	08003582 	.word	0x08003582
 8002f00:	00000000 	.word	0x00000000
 8002f04:	08002c69 	.word	0x08002c69

08002f08 <_printf_common>:
 8002f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f0c:	4691      	mov	r9, r2
 8002f0e:	461f      	mov	r7, r3
 8002f10:	688a      	ldr	r2, [r1, #8]
 8002f12:	690b      	ldr	r3, [r1, #16]
 8002f14:	4606      	mov	r6, r0
 8002f16:	4293      	cmp	r3, r2
 8002f18:	bfb8      	it	lt
 8002f1a:	4613      	movlt	r3, r2
 8002f1c:	f8c9 3000 	str.w	r3, [r9]
 8002f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f24:	460c      	mov	r4, r1
 8002f26:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f2a:	b112      	cbz	r2, 8002f32 <_printf_common+0x2a>
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	f8c9 3000 	str.w	r3, [r9]
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	0699      	lsls	r1, r3, #26
 8002f36:	bf42      	ittt	mi
 8002f38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002f3c:	3302      	addmi	r3, #2
 8002f3e:	f8c9 3000 	strmi.w	r3, [r9]
 8002f42:	6825      	ldr	r5, [r4, #0]
 8002f44:	f015 0506 	ands.w	r5, r5, #6
 8002f48:	d107      	bne.n	8002f5a <_printf_common+0x52>
 8002f4a:	f104 0a19 	add.w	sl, r4, #25
 8002f4e:	68e3      	ldr	r3, [r4, #12]
 8002f50:	f8d9 2000 	ldr.w	r2, [r9]
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	429d      	cmp	r5, r3
 8002f58:	db2a      	blt.n	8002fb0 <_printf_common+0xa8>
 8002f5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002f5e:	6822      	ldr	r2, [r4, #0]
 8002f60:	3300      	adds	r3, #0
 8002f62:	bf18      	it	ne
 8002f64:	2301      	movne	r3, #1
 8002f66:	0692      	lsls	r2, r2, #26
 8002f68:	d42f      	bmi.n	8002fca <_printf_common+0xc2>
 8002f6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f6e:	4639      	mov	r1, r7
 8002f70:	4630      	mov	r0, r6
 8002f72:	47c0      	blx	r8
 8002f74:	3001      	adds	r0, #1
 8002f76:	d022      	beq.n	8002fbe <_printf_common+0xb6>
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	68e5      	ldr	r5, [r4, #12]
 8002f7c:	f003 0306 	and.w	r3, r3, #6
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	bf18      	it	ne
 8002f84:	2500      	movne	r5, #0
 8002f86:	f8d9 2000 	ldr.w	r2, [r9]
 8002f8a:	f04f 0900 	mov.w	r9, #0
 8002f8e:	bf08      	it	eq
 8002f90:	1aad      	subeq	r5, r5, r2
 8002f92:	68a3      	ldr	r3, [r4, #8]
 8002f94:	6922      	ldr	r2, [r4, #16]
 8002f96:	bf08      	it	eq
 8002f98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	bfc4      	itt	gt
 8002fa0:	1a9b      	subgt	r3, r3, r2
 8002fa2:	18ed      	addgt	r5, r5, r3
 8002fa4:	341a      	adds	r4, #26
 8002fa6:	454d      	cmp	r5, r9
 8002fa8:	d11b      	bne.n	8002fe2 <_printf_common+0xda>
 8002faa:	2000      	movs	r0, #0
 8002fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	4652      	mov	r2, sl
 8002fb4:	4639      	mov	r1, r7
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	47c0      	blx	r8
 8002fba:	3001      	adds	r0, #1
 8002fbc:	d103      	bne.n	8002fc6 <_printf_common+0xbe>
 8002fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8002fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fc6:	3501      	adds	r5, #1
 8002fc8:	e7c1      	b.n	8002f4e <_printf_common+0x46>
 8002fca:	2030      	movs	r0, #48	; 0x30
 8002fcc:	18e1      	adds	r1, r4, r3
 8002fce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fd8:	4422      	add	r2, r4
 8002fda:	3302      	adds	r3, #2
 8002fdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fe0:	e7c3      	b.n	8002f6a <_printf_common+0x62>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	4622      	mov	r2, r4
 8002fe6:	4639      	mov	r1, r7
 8002fe8:	4630      	mov	r0, r6
 8002fea:	47c0      	blx	r8
 8002fec:	3001      	adds	r0, #1
 8002fee:	d0e6      	beq.n	8002fbe <_printf_common+0xb6>
 8002ff0:	f109 0901 	add.w	r9, r9, #1
 8002ff4:	e7d7      	b.n	8002fa6 <_printf_common+0x9e>
	...

08002ff8 <_printf_i>:
 8002ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ffc:	4617      	mov	r7, r2
 8002ffe:	7e0a      	ldrb	r2, [r1, #24]
 8003000:	b085      	sub	sp, #20
 8003002:	2a6e      	cmp	r2, #110	; 0x6e
 8003004:	4698      	mov	r8, r3
 8003006:	4606      	mov	r6, r0
 8003008:	460c      	mov	r4, r1
 800300a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800300c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003010:	f000 80bc 	beq.w	800318c <_printf_i+0x194>
 8003014:	d81a      	bhi.n	800304c <_printf_i+0x54>
 8003016:	2a63      	cmp	r2, #99	; 0x63
 8003018:	d02e      	beq.n	8003078 <_printf_i+0x80>
 800301a:	d80a      	bhi.n	8003032 <_printf_i+0x3a>
 800301c:	2a00      	cmp	r2, #0
 800301e:	f000 80c8 	beq.w	80031b2 <_printf_i+0x1ba>
 8003022:	2a58      	cmp	r2, #88	; 0x58
 8003024:	f000 808a 	beq.w	800313c <_printf_i+0x144>
 8003028:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800302c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003030:	e02a      	b.n	8003088 <_printf_i+0x90>
 8003032:	2a64      	cmp	r2, #100	; 0x64
 8003034:	d001      	beq.n	800303a <_printf_i+0x42>
 8003036:	2a69      	cmp	r2, #105	; 0x69
 8003038:	d1f6      	bne.n	8003028 <_printf_i+0x30>
 800303a:	6821      	ldr	r1, [r4, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003042:	d023      	beq.n	800308c <_printf_i+0x94>
 8003044:	1d11      	adds	r1, r2, #4
 8003046:	6019      	str	r1, [r3, #0]
 8003048:	6813      	ldr	r3, [r2, #0]
 800304a:	e027      	b.n	800309c <_printf_i+0xa4>
 800304c:	2a73      	cmp	r2, #115	; 0x73
 800304e:	f000 80b4 	beq.w	80031ba <_printf_i+0x1c2>
 8003052:	d808      	bhi.n	8003066 <_printf_i+0x6e>
 8003054:	2a6f      	cmp	r2, #111	; 0x6f
 8003056:	d02a      	beq.n	80030ae <_printf_i+0xb6>
 8003058:	2a70      	cmp	r2, #112	; 0x70
 800305a:	d1e5      	bne.n	8003028 <_printf_i+0x30>
 800305c:	680a      	ldr	r2, [r1, #0]
 800305e:	f042 0220 	orr.w	r2, r2, #32
 8003062:	600a      	str	r2, [r1, #0]
 8003064:	e003      	b.n	800306e <_printf_i+0x76>
 8003066:	2a75      	cmp	r2, #117	; 0x75
 8003068:	d021      	beq.n	80030ae <_printf_i+0xb6>
 800306a:	2a78      	cmp	r2, #120	; 0x78
 800306c:	d1dc      	bne.n	8003028 <_printf_i+0x30>
 800306e:	2278      	movs	r2, #120	; 0x78
 8003070:	496f      	ldr	r1, [pc, #444]	; (8003230 <_printf_i+0x238>)
 8003072:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003076:	e064      	b.n	8003142 <_printf_i+0x14a>
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800307e:	1d11      	adds	r1, r2, #4
 8003080:	6019      	str	r1, [r3, #0]
 8003082:	6813      	ldr	r3, [r2, #0]
 8003084:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003088:	2301      	movs	r3, #1
 800308a:	e0a3      	b.n	80031d4 <_printf_i+0x1dc>
 800308c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003090:	f102 0104 	add.w	r1, r2, #4
 8003094:	6019      	str	r1, [r3, #0]
 8003096:	d0d7      	beq.n	8003048 <_printf_i+0x50>
 8003098:	f9b2 3000 	ldrsh.w	r3, [r2]
 800309c:	2b00      	cmp	r3, #0
 800309e:	da03      	bge.n	80030a8 <_printf_i+0xb0>
 80030a0:	222d      	movs	r2, #45	; 0x2d
 80030a2:	425b      	negs	r3, r3
 80030a4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80030a8:	4962      	ldr	r1, [pc, #392]	; (8003234 <_printf_i+0x23c>)
 80030aa:	220a      	movs	r2, #10
 80030ac:	e017      	b.n	80030de <_printf_i+0xe6>
 80030ae:	6820      	ldr	r0, [r4, #0]
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80030b6:	d003      	beq.n	80030c0 <_printf_i+0xc8>
 80030b8:	1d08      	adds	r0, r1, #4
 80030ba:	6018      	str	r0, [r3, #0]
 80030bc:	680b      	ldr	r3, [r1, #0]
 80030be:	e006      	b.n	80030ce <_printf_i+0xd6>
 80030c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80030c4:	f101 0004 	add.w	r0, r1, #4
 80030c8:	6018      	str	r0, [r3, #0]
 80030ca:	d0f7      	beq.n	80030bc <_printf_i+0xc4>
 80030cc:	880b      	ldrh	r3, [r1, #0]
 80030ce:	2a6f      	cmp	r2, #111	; 0x6f
 80030d0:	bf14      	ite	ne
 80030d2:	220a      	movne	r2, #10
 80030d4:	2208      	moveq	r2, #8
 80030d6:	4957      	ldr	r1, [pc, #348]	; (8003234 <_printf_i+0x23c>)
 80030d8:	2000      	movs	r0, #0
 80030da:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80030de:	6865      	ldr	r5, [r4, #4]
 80030e0:	2d00      	cmp	r5, #0
 80030e2:	60a5      	str	r5, [r4, #8]
 80030e4:	f2c0 809c 	blt.w	8003220 <_printf_i+0x228>
 80030e8:	6820      	ldr	r0, [r4, #0]
 80030ea:	f020 0004 	bic.w	r0, r0, #4
 80030ee:	6020      	str	r0, [r4, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d13f      	bne.n	8003174 <_printf_i+0x17c>
 80030f4:	2d00      	cmp	r5, #0
 80030f6:	f040 8095 	bne.w	8003224 <_printf_i+0x22c>
 80030fa:	4675      	mov	r5, lr
 80030fc:	2a08      	cmp	r2, #8
 80030fe:	d10b      	bne.n	8003118 <_printf_i+0x120>
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	07da      	lsls	r2, r3, #31
 8003104:	d508      	bpl.n	8003118 <_printf_i+0x120>
 8003106:	6923      	ldr	r3, [r4, #16]
 8003108:	6862      	ldr	r2, [r4, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	bfde      	ittt	le
 800310e:	2330      	movle	r3, #48	; 0x30
 8003110:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003114:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003118:	ebae 0305 	sub.w	r3, lr, r5
 800311c:	6123      	str	r3, [r4, #16]
 800311e:	f8cd 8000 	str.w	r8, [sp]
 8003122:	463b      	mov	r3, r7
 8003124:	aa03      	add	r2, sp, #12
 8003126:	4621      	mov	r1, r4
 8003128:	4630      	mov	r0, r6
 800312a:	f7ff feed 	bl	8002f08 <_printf_common>
 800312e:	3001      	adds	r0, #1
 8003130:	d155      	bne.n	80031de <_printf_i+0x1e6>
 8003132:	f04f 30ff 	mov.w	r0, #4294967295
 8003136:	b005      	add	sp, #20
 8003138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800313c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003140:	493c      	ldr	r1, [pc, #240]	; (8003234 <_printf_i+0x23c>)
 8003142:	6822      	ldr	r2, [r4, #0]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	f012 0f80 	tst.w	r2, #128	; 0x80
 800314a:	f100 0504 	add.w	r5, r0, #4
 800314e:	601d      	str	r5, [r3, #0]
 8003150:	d001      	beq.n	8003156 <_printf_i+0x15e>
 8003152:	6803      	ldr	r3, [r0, #0]
 8003154:	e002      	b.n	800315c <_printf_i+0x164>
 8003156:	0655      	lsls	r5, r2, #25
 8003158:	d5fb      	bpl.n	8003152 <_printf_i+0x15a>
 800315a:	8803      	ldrh	r3, [r0, #0]
 800315c:	07d0      	lsls	r0, r2, #31
 800315e:	bf44      	itt	mi
 8003160:	f042 0220 	orrmi.w	r2, r2, #32
 8003164:	6022      	strmi	r2, [r4, #0]
 8003166:	b91b      	cbnz	r3, 8003170 <_printf_i+0x178>
 8003168:	6822      	ldr	r2, [r4, #0]
 800316a:	f022 0220 	bic.w	r2, r2, #32
 800316e:	6022      	str	r2, [r4, #0]
 8003170:	2210      	movs	r2, #16
 8003172:	e7b1      	b.n	80030d8 <_printf_i+0xe0>
 8003174:	4675      	mov	r5, lr
 8003176:	fbb3 f0f2 	udiv	r0, r3, r2
 800317a:	fb02 3310 	mls	r3, r2, r0, r3
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003184:	4603      	mov	r3, r0
 8003186:	2800      	cmp	r0, #0
 8003188:	d1f5      	bne.n	8003176 <_printf_i+0x17e>
 800318a:	e7b7      	b.n	80030fc <_printf_i+0x104>
 800318c:	6808      	ldr	r0, [r1, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003194:	6949      	ldr	r1, [r1, #20]
 8003196:	d004      	beq.n	80031a2 <_printf_i+0x1aa>
 8003198:	1d10      	adds	r0, r2, #4
 800319a:	6018      	str	r0, [r3, #0]
 800319c:	6813      	ldr	r3, [r2, #0]
 800319e:	6019      	str	r1, [r3, #0]
 80031a0:	e007      	b.n	80031b2 <_printf_i+0x1ba>
 80031a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031a6:	f102 0004 	add.w	r0, r2, #4
 80031aa:	6018      	str	r0, [r3, #0]
 80031ac:	6813      	ldr	r3, [r2, #0]
 80031ae:	d0f6      	beq.n	800319e <_printf_i+0x1a6>
 80031b0:	8019      	strh	r1, [r3, #0]
 80031b2:	2300      	movs	r3, #0
 80031b4:	4675      	mov	r5, lr
 80031b6:	6123      	str	r3, [r4, #16]
 80031b8:	e7b1      	b.n	800311e <_printf_i+0x126>
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	1d11      	adds	r1, r2, #4
 80031be:	6019      	str	r1, [r3, #0]
 80031c0:	6815      	ldr	r5, [r2, #0]
 80031c2:	2100      	movs	r1, #0
 80031c4:	6862      	ldr	r2, [r4, #4]
 80031c6:	4628      	mov	r0, r5
 80031c8:	f000 f836 	bl	8003238 <memchr>
 80031cc:	b108      	cbz	r0, 80031d2 <_printf_i+0x1da>
 80031ce:	1b40      	subs	r0, r0, r5
 80031d0:	6060      	str	r0, [r4, #4]
 80031d2:	6863      	ldr	r3, [r4, #4]
 80031d4:	6123      	str	r3, [r4, #16]
 80031d6:	2300      	movs	r3, #0
 80031d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031dc:	e79f      	b.n	800311e <_printf_i+0x126>
 80031de:	6923      	ldr	r3, [r4, #16]
 80031e0:	462a      	mov	r2, r5
 80031e2:	4639      	mov	r1, r7
 80031e4:	4630      	mov	r0, r6
 80031e6:	47c0      	blx	r8
 80031e8:	3001      	adds	r0, #1
 80031ea:	d0a2      	beq.n	8003132 <_printf_i+0x13a>
 80031ec:	6823      	ldr	r3, [r4, #0]
 80031ee:	079b      	lsls	r3, r3, #30
 80031f0:	d507      	bpl.n	8003202 <_printf_i+0x20a>
 80031f2:	2500      	movs	r5, #0
 80031f4:	f104 0919 	add.w	r9, r4, #25
 80031f8:	68e3      	ldr	r3, [r4, #12]
 80031fa:	9a03      	ldr	r2, [sp, #12]
 80031fc:	1a9b      	subs	r3, r3, r2
 80031fe:	429d      	cmp	r5, r3
 8003200:	db05      	blt.n	800320e <_printf_i+0x216>
 8003202:	68e0      	ldr	r0, [r4, #12]
 8003204:	9b03      	ldr	r3, [sp, #12]
 8003206:	4298      	cmp	r0, r3
 8003208:	bfb8      	it	lt
 800320a:	4618      	movlt	r0, r3
 800320c:	e793      	b.n	8003136 <_printf_i+0x13e>
 800320e:	2301      	movs	r3, #1
 8003210:	464a      	mov	r2, r9
 8003212:	4639      	mov	r1, r7
 8003214:	4630      	mov	r0, r6
 8003216:	47c0      	blx	r8
 8003218:	3001      	adds	r0, #1
 800321a:	d08a      	beq.n	8003132 <_printf_i+0x13a>
 800321c:	3501      	adds	r5, #1
 800321e:	e7eb      	b.n	80031f8 <_printf_i+0x200>
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1a7      	bne.n	8003174 <_printf_i+0x17c>
 8003224:	780b      	ldrb	r3, [r1, #0]
 8003226:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800322a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800322e:	e765      	b.n	80030fc <_printf_i+0x104>
 8003230:	0800359a 	.word	0x0800359a
 8003234:	08003589 	.word	0x08003589

08003238 <memchr>:
 8003238:	b510      	push	{r4, lr}
 800323a:	b2c9      	uxtb	r1, r1
 800323c:	4402      	add	r2, r0
 800323e:	4290      	cmp	r0, r2
 8003240:	4603      	mov	r3, r0
 8003242:	d101      	bne.n	8003248 <memchr+0x10>
 8003244:	2000      	movs	r0, #0
 8003246:	bd10      	pop	{r4, pc}
 8003248:	781c      	ldrb	r4, [r3, #0]
 800324a:	3001      	adds	r0, #1
 800324c:	428c      	cmp	r4, r1
 800324e:	d1f6      	bne.n	800323e <memchr+0x6>
 8003250:	4618      	mov	r0, r3
 8003252:	bd10      	pop	{r4, pc}

08003254 <memcpy>:
 8003254:	b510      	push	{r4, lr}
 8003256:	1e43      	subs	r3, r0, #1
 8003258:	440a      	add	r2, r1
 800325a:	4291      	cmp	r1, r2
 800325c:	d100      	bne.n	8003260 <memcpy+0xc>
 800325e:	bd10      	pop	{r4, pc}
 8003260:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003268:	e7f7      	b.n	800325a <memcpy+0x6>

0800326a <memmove>:
 800326a:	4288      	cmp	r0, r1
 800326c:	b510      	push	{r4, lr}
 800326e:	eb01 0302 	add.w	r3, r1, r2
 8003272:	d803      	bhi.n	800327c <memmove+0x12>
 8003274:	1e42      	subs	r2, r0, #1
 8003276:	4299      	cmp	r1, r3
 8003278:	d10c      	bne.n	8003294 <memmove+0x2a>
 800327a:	bd10      	pop	{r4, pc}
 800327c:	4298      	cmp	r0, r3
 800327e:	d2f9      	bcs.n	8003274 <memmove+0xa>
 8003280:	1881      	adds	r1, r0, r2
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	42d3      	cmn	r3, r2
 8003286:	d100      	bne.n	800328a <memmove+0x20>
 8003288:	bd10      	pop	{r4, pc}
 800328a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800328e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003292:	e7f7      	b.n	8003284 <memmove+0x1a>
 8003294:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003298:	f802 4f01 	strb.w	r4, [r2, #1]!
 800329c:	e7eb      	b.n	8003276 <memmove+0xc>
	...

080032a0 <_free_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4605      	mov	r5, r0
 80032a4:	2900      	cmp	r1, #0
 80032a6:	d043      	beq.n	8003330 <_free_r+0x90>
 80032a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032ac:	1f0c      	subs	r4, r1, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	bfb8      	it	lt
 80032b2:	18e4      	addlt	r4, r4, r3
 80032b4:	f000 f8d4 	bl	8003460 <__malloc_lock>
 80032b8:	4a1e      	ldr	r2, [pc, #120]	; (8003334 <_free_r+0x94>)
 80032ba:	6813      	ldr	r3, [r2, #0]
 80032bc:	4610      	mov	r0, r2
 80032be:	b933      	cbnz	r3, 80032ce <_free_r+0x2e>
 80032c0:	6063      	str	r3, [r4, #4]
 80032c2:	6014      	str	r4, [r2, #0]
 80032c4:	4628      	mov	r0, r5
 80032c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032ca:	f000 b8ca 	b.w	8003462 <__malloc_unlock>
 80032ce:	42a3      	cmp	r3, r4
 80032d0:	d90b      	bls.n	80032ea <_free_r+0x4a>
 80032d2:	6821      	ldr	r1, [r4, #0]
 80032d4:	1862      	adds	r2, r4, r1
 80032d6:	4293      	cmp	r3, r2
 80032d8:	bf01      	itttt	eq
 80032da:	681a      	ldreq	r2, [r3, #0]
 80032dc:	685b      	ldreq	r3, [r3, #4]
 80032de:	1852      	addeq	r2, r2, r1
 80032e0:	6022      	streq	r2, [r4, #0]
 80032e2:	6063      	str	r3, [r4, #4]
 80032e4:	6004      	str	r4, [r0, #0]
 80032e6:	e7ed      	b.n	80032c4 <_free_r+0x24>
 80032e8:	4613      	mov	r3, r2
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	b10a      	cbz	r2, 80032f2 <_free_r+0x52>
 80032ee:	42a2      	cmp	r2, r4
 80032f0:	d9fa      	bls.n	80032e8 <_free_r+0x48>
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	1858      	adds	r0, r3, r1
 80032f6:	42a0      	cmp	r0, r4
 80032f8:	d10b      	bne.n	8003312 <_free_r+0x72>
 80032fa:	6820      	ldr	r0, [r4, #0]
 80032fc:	4401      	add	r1, r0
 80032fe:	1858      	adds	r0, r3, r1
 8003300:	4282      	cmp	r2, r0
 8003302:	6019      	str	r1, [r3, #0]
 8003304:	d1de      	bne.n	80032c4 <_free_r+0x24>
 8003306:	6810      	ldr	r0, [r2, #0]
 8003308:	6852      	ldr	r2, [r2, #4]
 800330a:	4401      	add	r1, r0
 800330c:	6019      	str	r1, [r3, #0]
 800330e:	605a      	str	r2, [r3, #4]
 8003310:	e7d8      	b.n	80032c4 <_free_r+0x24>
 8003312:	d902      	bls.n	800331a <_free_r+0x7a>
 8003314:	230c      	movs	r3, #12
 8003316:	602b      	str	r3, [r5, #0]
 8003318:	e7d4      	b.n	80032c4 <_free_r+0x24>
 800331a:	6820      	ldr	r0, [r4, #0]
 800331c:	1821      	adds	r1, r4, r0
 800331e:	428a      	cmp	r2, r1
 8003320:	bf01      	itttt	eq
 8003322:	6811      	ldreq	r1, [r2, #0]
 8003324:	6852      	ldreq	r2, [r2, #4]
 8003326:	1809      	addeq	r1, r1, r0
 8003328:	6021      	streq	r1, [r4, #0]
 800332a:	6062      	str	r2, [r4, #4]
 800332c:	605c      	str	r4, [r3, #4]
 800332e:	e7c9      	b.n	80032c4 <_free_r+0x24>
 8003330:	bd38      	pop	{r3, r4, r5, pc}
 8003332:	bf00      	nop
 8003334:	20000094 	.word	0x20000094

08003338 <_malloc_r>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	1ccd      	adds	r5, r1, #3
 800333c:	f025 0503 	bic.w	r5, r5, #3
 8003340:	3508      	adds	r5, #8
 8003342:	2d0c      	cmp	r5, #12
 8003344:	bf38      	it	cc
 8003346:	250c      	movcc	r5, #12
 8003348:	2d00      	cmp	r5, #0
 800334a:	4606      	mov	r6, r0
 800334c:	db01      	blt.n	8003352 <_malloc_r+0x1a>
 800334e:	42a9      	cmp	r1, r5
 8003350:	d903      	bls.n	800335a <_malloc_r+0x22>
 8003352:	230c      	movs	r3, #12
 8003354:	6033      	str	r3, [r6, #0]
 8003356:	2000      	movs	r0, #0
 8003358:	bd70      	pop	{r4, r5, r6, pc}
 800335a:	f000 f881 	bl	8003460 <__malloc_lock>
 800335e:	4a23      	ldr	r2, [pc, #140]	; (80033ec <_malloc_r+0xb4>)
 8003360:	6814      	ldr	r4, [r2, #0]
 8003362:	4621      	mov	r1, r4
 8003364:	b991      	cbnz	r1, 800338c <_malloc_r+0x54>
 8003366:	4c22      	ldr	r4, [pc, #136]	; (80033f0 <_malloc_r+0xb8>)
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	b91b      	cbnz	r3, 8003374 <_malloc_r+0x3c>
 800336c:	4630      	mov	r0, r6
 800336e:	f000 f867 	bl	8003440 <_sbrk_r>
 8003372:	6020      	str	r0, [r4, #0]
 8003374:	4629      	mov	r1, r5
 8003376:	4630      	mov	r0, r6
 8003378:	f000 f862 	bl	8003440 <_sbrk_r>
 800337c:	1c43      	adds	r3, r0, #1
 800337e:	d126      	bne.n	80033ce <_malloc_r+0x96>
 8003380:	230c      	movs	r3, #12
 8003382:	4630      	mov	r0, r6
 8003384:	6033      	str	r3, [r6, #0]
 8003386:	f000 f86c 	bl	8003462 <__malloc_unlock>
 800338a:	e7e4      	b.n	8003356 <_malloc_r+0x1e>
 800338c:	680b      	ldr	r3, [r1, #0]
 800338e:	1b5b      	subs	r3, r3, r5
 8003390:	d41a      	bmi.n	80033c8 <_malloc_r+0x90>
 8003392:	2b0b      	cmp	r3, #11
 8003394:	d90f      	bls.n	80033b6 <_malloc_r+0x7e>
 8003396:	600b      	str	r3, [r1, #0]
 8003398:	18cc      	adds	r4, r1, r3
 800339a:	50cd      	str	r5, [r1, r3]
 800339c:	4630      	mov	r0, r6
 800339e:	f000 f860 	bl	8003462 <__malloc_unlock>
 80033a2:	f104 000b 	add.w	r0, r4, #11
 80033a6:	1d23      	adds	r3, r4, #4
 80033a8:	f020 0007 	bic.w	r0, r0, #7
 80033ac:	1ac3      	subs	r3, r0, r3
 80033ae:	d01b      	beq.n	80033e8 <_malloc_r+0xb0>
 80033b0:	425a      	negs	r2, r3
 80033b2:	50e2      	str	r2, [r4, r3]
 80033b4:	bd70      	pop	{r4, r5, r6, pc}
 80033b6:	428c      	cmp	r4, r1
 80033b8:	bf0b      	itete	eq
 80033ba:	6863      	ldreq	r3, [r4, #4]
 80033bc:	684b      	ldrne	r3, [r1, #4]
 80033be:	6013      	streq	r3, [r2, #0]
 80033c0:	6063      	strne	r3, [r4, #4]
 80033c2:	bf18      	it	ne
 80033c4:	460c      	movne	r4, r1
 80033c6:	e7e9      	b.n	800339c <_malloc_r+0x64>
 80033c8:	460c      	mov	r4, r1
 80033ca:	6849      	ldr	r1, [r1, #4]
 80033cc:	e7ca      	b.n	8003364 <_malloc_r+0x2c>
 80033ce:	1cc4      	adds	r4, r0, #3
 80033d0:	f024 0403 	bic.w	r4, r4, #3
 80033d4:	42a0      	cmp	r0, r4
 80033d6:	d005      	beq.n	80033e4 <_malloc_r+0xac>
 80033d8:	1a21      	subs	r1, r4, r0
 80033da:	4630      	mov	r0, r6
 80033dc:	f000 f830 	bl	8003440 <_sbrk_r>
 80033e0:	3001      	adds	r0, #1
 80033e2:	d0cd      	beq.n	8003380 <_malloc_r+0x48>
 80033e4:	6025      	str	r5, [r4, #0]
 80033e6:	e7d9      	b.n	800339c <_malloc_r+0x64>
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
 80033ea:	bf00      	nop
 80033ec:	20000094 	.word	0x20000094
 80033f0:	20000098 	.word	0x20000098

080033f4 <_realloc_r>:
 80033f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033f6:	4607      	mov	r7, r0
 80033f8:	4614      	mov	r4, r2
 80033fa:	460e      	mov	r6, r1
 80033fc:	b921      	cbnz	r1, 8003408 <_realloc_r+0x14>
 80033fe:	4611      	mov	r1, r2
 8003400:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003404:	f7ff bf98 	b.w	8003338 <_malloc_r>
 8003408:	b922      	cbnz	r2, 8003414 <_realloc_r+0x20>
 800340a:	f7ff ff49 	bl	80032a0 <_free_r>
 800340e:	4625      	mov	r5, r4
 8003410:	4628      	mov	r0, r5
 8003412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003414:	f000 f826 	bl	8003464 <_malloc_usable_size_r>
 8003418:	4284      	cmp	r4, r0
 800341a:	d90f      	bls.n	800343c <_realloc_r+0x48>
 800341c:	4621      	mov	r1, r4
 800341e:	4638      	mov	r0, r7
 8003420:	f7ff ff8a 	bl	8003338 <_malloc_r>
 8003424:	4605      	mov	r5, r0
 8003426:	2800      	cmp	r0, #0
 8003428:	d0f2      	beq.n	8003410 <_realloc_r+0x1c>
 800342a:	4631      	mov	r1, r6
 800342c:	4622      	mov	r2, r4
 800342e:	f7ff ff11 	bl	8003254 <memcpy>
 8003432:	4631      	mov	r1, r6
 8003434:	4638      	mov	r0, r7
 8003436:	f7ff ff33 	bl	80032a0 <_free_r>
 800343a:	e7e9      	b.n	8003410 <_realloc_r+0x1c>
 800343c:	4635      	mov	r5, r6
 800343e:	e7e7      	b.n	8003410 <_realloc_r+0x1c>

08003440 <_sbrk_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	2300      	movs	r3, #0
 8003444:	4c05      	ldr	r4, [pc, #20]	; (800345c <_sbrk_r+0x1c>)
 8003446:	4605      	mov	r5, r0
 8003448:	4608      	mov	r0, r1
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	f000 f814 	bl	8003478 <_sbrk>
 8003450:	1c43      	adds	r3, r0, #1
 8003452:	d102      	bne.n	800345a <_sbrk_r+0x1a>
 8003454:	6823      	ldr	r3, [r4, #0]
 8003456:	b103      	cbz	r3, 800345a <_sbrk_r+0x1a>
 8003458:	602b      	str	r3, [r5, #0]
 800345a:	bd38      	pop	{r3, r4, r5, pc}
 800345c:	20000178 	.word	0x20000178

08003460 <__malloc_lock>:
 8003460:	4770      	bx	lr

08003462 <__malloc_unlock>:
 8003462:	4770      	bx	lr

08003464 <_malloc_usable_size_r>:
 8003464:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003468:	2800      	cmp	r0, #0
 800346a:	f1a0 0004 	sub.w	r0, r0, #4
 800346e:	bfbc      	itt	lt
 8003470:	580b      	ldrlt	r3, [r1, r0]
 8003472:	18c0      	addlt	r0, r0, r3
 8003474:	4770      	bx	lr
	...

08003478 <_sbrk>:
 8003478:	4b04      	ldr	r3, [pc, #16]	; (800348c <_sbrk+0x14>)
 800347a:	4602      	mov	r2, r0
 800347c:	6819      	ldr	r1, [r3, #0]
 800347e:	b909      	cbnz	r1, 8003484 <_sbrk+0xc>
 8003480:	4903      	ldr	r1, [pc, #12]	; (8003490 <_sbrk+0x18>)
 8003482:	6019      	str	r1, [r3, #0]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	4402      	add	r2, r0
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	4770      	bx	lr
 800348c:	2000009c 	.word	0x2000009c
 8003490:	2000017c 	.word	0x2000017c

08003494 <_init>:
 8003494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003496:	bf00      	nop
 8003498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800349a:	bc08      	pop	{r3}
 800349c:	469e      	mov	lr, r3
 800349e:	4770      	bx	lr

080034a0 <_fini>:
 80034a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a2:	bf00      	nop
 80034a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034a6:	bc08      	pop	{r3}
 80034a8:	469e      	mov	lr, r3
 80034aa:	4770      	bx	lr
